
fra222_lab09_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003890  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c84  08003c84  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003c84  08003c84  00013c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c8c  08003c8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c8c  08003c8c  00013c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c90  08003c90  00013c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  20000070  08003d04  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08003d04  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a49  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017e7  00000000  00000000  00028ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  0002a2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  0002a9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015986  00000000  00000000  0002b078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007fbc  00000000  00000000  000409fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e3e  00000000  00000000  000489ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ce7f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001df4  00000000  00000000  000ce84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003a10 	.word	0x08003a10

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08003a10 	.word	0x08003a10

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004d6:	f000 fef5 	bl	80012c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004da:	f000 f849 	bl	8000570 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004de:	f000 f903 	bl	80006e8 <MX_GPIO_Init>
	MX_DMA_Init();
 80004e2:	f000 f8d9 	bl	8000698 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80004e6:	f000 f8ad 	bl	8000644 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	UART2.huart = &huart2;
 80004ea:	4b1c      	ldr	r3, [pc, #112]	; (800055c <main+0x8c>)
 80004ec:	4a1c      	ldr	r2, [pc, #112]	; (8000560 <main+0x90>)
 80004ee:	601a      	str	r2, [r3, #0]
	UART2.RxLen = 255;
 80004f0:	4b1a      	ldr	r3, [pc, #104]	; (800055c <main+0x8c>)
 80004f2:	22ff      	movs	r2, #255	; 0xff
 80004f4:	80da      	strh	r2, [r3, #6]
	UART2.TxLen = 255;
 80004f6:	4b19      	ldr	r3, [pc, #100]	; (800055c <main+0x8c>)
 80004f8:	22ff      	movs	r2, #255	; 0xff
 80004fa:	809a      	strh	r2, [r3, #4]
	UARTInit(&UART2);
 80004fc:	4817      	ldr	r0, [pc, #92]	; (800055c <main+0x8c>)
 80004fe:	f000 f963 	bl	80007c8 <UARTInit>
	UARTResetStart(&UART2);
 8000502:	4816      	ldr	r0, [pc, #88]	; (800055c <main+0x8c>)
 8000504:	f000 f988 	bl	8000818 <UARTResetStart>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		int16_t inputChar = UARTReadChar(&UART2);
 8000508:	4814      	ldr	r0, [pc, #80]	; (800055c <main+0x8c>)
 800050a:	f000 f9a9 	bl	8000860 <UARTReadChar>
 800050e:	4603      	mov	r3, r0
 8000510:	80fb      	strh	r3, [r7, #6]
		if (inputChar != -1)
 8000512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800051a:	d01b      	beq.n	8000554 <main+0x84>
		{
			//self-try
			record[record_idx] = inputChar;
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <main+0x94>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	4619      	mov	r1, r3
 8000522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000526:	4a10      	ldr	r2, [pc, #64]	; (8000568 <main+0x98>)
 8000528:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			record_idx += 1;
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <main+0x94>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	3301      	adds	r3, #1
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <main+0x94>)
 8000536:	701a      	strb	r2, [r3, #0]
			record_idx = record_idx%16;
 8000538:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <main+0x94>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	f003 030f 	and.w	r3, r3, #15
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <main+0x94>)
 8000544:	701a      	strb	r2, [r3, #0]
#ifdef UARTDEBUG
			char temp[32];
			sprintf(temp, "Recived [%d]\r\n", inputChar);
			UARTTxWrite(&UART2, (uint8_t*) temp, strlen(temp));
#else
			DynamixelProtocal2(MainMemory, 1, inputChar, &UART2);
 8000546:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800054a:	4b04      	ldr	r3, [pc, #16]	; (800055c <main+0x8c>)
 800054c:	2101      	movs	r1, #1
 800054e:	4807      	ldr	r0, [pc, #28]	; (800056c <main+0x9c>)
 8000550:	f000 fa48 	bl	80009e4 <DynamixelProtocal2>

		}
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		UARTTxDumpBuffer(&UART2);
 8000554:	4801      	ldr	r0, [pc, #4]	; (800055c <main+0x8c>)
 8000556:	f000 f9ad 	bl	80008b4 <UARTTxDumpBuffer>
	{
 800055a:	e7d5      	b.n	8000508 <main+0x38>
 800055c:	2000008c 	.word	0x2000008c
 8000560:	200003c0 	.word	0x200003c0
 8000564:	200001e4 	.word	0x200001e4
 8000568:	200001a4 	.word	0x200001a4
 800056c:	200000a4 	.word	0x200000a4

08000570 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2230      	movs	r2, #48	; 0x30
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f003 f9b6 	bl	80038f0 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	4b28      	ldr	r3, [pc, #160]	; (800063c <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a27      	ldr	r2, [pc, #156]	; (800063c <SystemClock_Config+0xcc>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b25      	ldr	r3, [pc, #148]	; (800063c <SystemClock_Config+0xcc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b22      	ldr	r3, [pc, #136]	; (8000640 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <SystemClock_Config+0xd0>)
 80005ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <SystemClock_Config+0xd0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d4:	2310      	movs	r3, #16
 80005d6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d8:	2302      	movs	r3, #2
 80005da:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005dc:	2300      	movs	r3, #0
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80005e0:	2310      	movs	r3, #16
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80005e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ea:	2304      	movs	r3, #4
 80005ec:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ee:	2304      	movs	r3, #4
 80005f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fd88 	bl	800210c <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000602:	f000 fcc1 	bl	8000f88 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2302      	movs	r3, #2
 800060c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000616:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2102      	movs	r1, #2
 8000622:	4618      	mov	r0, r3
 8000624:	f001 ffea 	bl	80025fc <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 800062e:	f000 fcab 	bl	8000f88 <Error_Handler>
	}
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	; 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 800064a:	4a12      	ldr	r2, [pc, #72]	; (8000694 <MX_USART2_UART_Init+0x50>)
 800064c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000654:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 800066a:	220c      	movs	r2, #12
 800066c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 800067c:	f002 f9ba 	bl	80029f4 <HAL_UART_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000686:	f000 fc7f 	bl	8000f88 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200003c0 	.word	0x200003c0
 8000694:	40004400 	.word	0x40004400

08000698 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_DMA_Init+0x4c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <MX_DMA_Init+0x4c>)
 80006a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_DMA_Init+0x4c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	2010      	movs	r0, #16
 80006c0:	f000 ff4d 	bl	800155e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006c4:	2010      	movs	r0, #16
 80006c6:	f000 ff66 	bl	8001596 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2011      	movs	r0, #17
 80006d0:	f000 ff45 	bl	800155e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006d4:	2011      	movs	r0, #17
 80006d6:	f000 ff5e 	bl	8001596 <HAL_NVIC_EnableIRQ>

}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800

080006e8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a2c      	ldr	r2, [pc, #176]	; (80007b8 <MX_GPIO_Init+0xd0>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b2a      	ldr	r3, [pc, #168]	; (80007b8 <MX_GPIO_Init+0xd0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <MX_GPIO_Init+0xd0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a25      	ldr	r2, [pc, #148]	; (80007b8 <MX_GPIO_Init+0xd0>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <MX_GPIO_Init+0xd0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <MX_GPIO_Init+0xd0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a1e      	ldr	r2, [pc, #120]	; (80007b8 <MX_GPIO_Init+0xd0>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_GPIO_Init+0xd0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_GPIO_Init+0xd0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a17      	ldr	r2, [pc, #92]	; (80007b8 <MX_GPIO_Init+0xd0>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2120      	movs	r1, #32
 8000772:	4812      	ldr	r0, [pc, #72]	; (80007bc <MX_GPIO_Init+0xd4>)
 8000774:	f001 fcb0 	bl	80020d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000778:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_GPIO_Init+0xd8>)
 8000780:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_GPIO_Init+0xdc>)
 800078e:	f001 fb1f 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000792:	2320      	movs	r3, #32
 8000794:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_GPIO_Init+0xd4>)
 80007aa:	f001 fb11 	bl	8001dd0 <HAL_GPIO_Init>

}
 80007ae:	bf00      	nop
 80007b0:	3728      	adds	r7, #40	; 0x28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020000 	.word	0x40020000
 80007c0:	10210000 	.word	0x10210000
 80007c4:	40020800 	.word	0x40020800

080007c8 <UARTInit>:

/* USER CODE BEGIN 4 */
void UARTInit(UARTStucrture *uart)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 80007d0:	4b10      	ldr	r3, [pc, #64]	; (8000814 <UARTInit+0x4c>)
 80007d2:	88db      	ldrh	r3, [r3, #6]
 80007d4:	4619      	mov	r1, r3
 80007d6:	2001      	movs	r0, #1
 80007d8:	f003 f84a 	bl	8003870 <calloc>
 80007dc:	4603      	mov	r3, r0
 80007de:	461a      	mov	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <UARTInit+0x4c>)
 80007e6:	889b      	ldrh	r3, [r3, #4]
 80007e8:	4619      	mov	r1, r3
 80007ea:	2001      	movs	r0, #1
 80007ec:	f003 f840 	bl	8003870 <calloc>
 80007f0:	4603      	mov	r3, r0
 80007f2:	461a      	mov	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	609a      	str	r2, [r3, #8]
//	uart->RxBuffer[UART2.RxLen] = (uint8_t) {0};
//	uart->TxBuffer[UART2.TxLen] = (uint8_t) {0};
	uart->RxTail = 0;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2200      	movs	r2, #0
 80007fc:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2200      	movs	r2, #0
 8000802:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	81da      	strh	r2, [r3, #14]

}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000008c 	.word	0x2000008c

08000818 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6818      	ldr	r0, [r3, #0]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6919      	ldr	r1, [r3, #16]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	88db      	ldrh	r3, [r3, #6]
 800082c:	461a      	mov	r2, r3
 800082e:	f002 f99b 	bl	8002b68 <HAL_UART_Receive_DMA>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	88db      	ldrh	r3, [r3, #6]
 8000846:	461a      	mov	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	1ad3      	subs	r3, r2, r3
}
 8000854:	4618      	mov	r0, r3
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8000868:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800086c:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	8a9b      	ldrh	r3, [r3, #20]
 8000872:	461c      	mov	r4, r3
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff ffe0 	bl	800083a <UARTGetRxHead>
 800087a:	4603      	mov	r3, r0
 800087c:	429c      	cmp	r4, r3
 800087e:	d013      	beq.n	80008a8 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	691b      	ldr	r3, [r3, #16]
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	8a92      	ldrh	r2, [r2, #20]
 8000888:	4413      	add	r3, r2
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	8a9b      	ldrh	r3, [r3, #20]
 8000892:	3301      	adds	r3, #1
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	88d2      	ldrh	r2, [r2, #6]
 8000898:	fb93 f1f2 	sdiv	r1, r3, r2
 800089c:	fb02 f201 	mul.w	r2, r2, r1
 80008a0:	1a9b      	subs	r3, r3, r2
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 80008a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd90      	pop	{r4, r7, pc}

080008b4 <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2b20      	cmp	r3, #32
 80008c8:	d13d      	bne.n	8000946 <UARTTxDumpBuffer+0x92>
 80008ca:	4b21      	ldr	r3, [pc, #132]	; (8000950 <UARTTxDumpBuffer+0x9c>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d139      	bne.n	8000946 <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <UARTTxDumpBuffer+0x9c>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	89da      	ldrh	r2, [r3, #14]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	899b      	ldrh	r3, [r3, #12]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d02d      	beq.n	8000940 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	89da      	ldrh	r2, [r3, #14]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d906      	bls.n	80008fe <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	89da      	ldrh	r2, [r3, #14]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	e005      	b.n	800090a <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	889a      	ldrh	r2, [r3, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	b29b      	uxth	r3, r3
 800090a:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6818      	ldr	r0, [r3, #0]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	8992      	ldrh	r2, [r2, #12]
 8000918:	4413      	add	r3, r2
 800091a:	89fa      	ldrh	r2, [r7, #14]
 800091c:	4619      	mov	r1, r3
 800091e:	f002 f8b7 	bl	8002a90 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	899b      	ldrh	r3, [r3, #12]
 8000926:	461a      	mov	r2, r3
 8000928:	89fb      	ldrh	r3, [r7, #14]
 800092a:	4413      	add	r3, r2
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	8892      	ldrh	r2, [r2, #4]
 8000930:	fb93 f1f2 	sdiv	r1, r3, r2
 8000934:	fb02 f201 	mul.w	r2, r2, r1
 8000938:	1a9b      	subs	r3, r3, r2
 800093a:	b29a      	uxth	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <UARTTxDumpBuffer+0x9c>)
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
	}
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200001e5 	.word	0x200001e5

08000954 <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	4613      	mov	r3, r2
 8000960:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	889b      	ldrh	r3, [r3, #4]
 8000966:	88fa      	ldrh	r2, [r7, #6]
 8000968:	4293      	cmp	r3, r2
 800096a:	bf28      	it	cs
 800096c:	4613      	movcs	r3, r2
 800096e:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8000970:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	889b      	ldrh	r3, [r3, #4]
 8000976:	4619      	mov	r1, r3
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	89db      	ldrh	r3, [r3, #14]
 800097c:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 800097e:	4293      	cmp	r3, r2
 8000980:	bfa8      	it	ge
 8000982:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 8000984:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	89d2      	ldrh	r2, [r2, #14]
 800098e:	4413      	add	r3, r2
 8000990:	8aba      	ldrh	r2, [r7, #20]
 8000992:	68b9      	ldr	r1, [r7, #8]
 8000994:	4618      	mov	r0, r3
 8000996:	f002 ff9d 	bl	80038d4 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	89db      	ldrh	r3, [r3, #14]
 800099e:	461a      	mov	r2, r3
 80009a0:	8afb      	ldrh	r3, [r7, #22]
 80009a2:	4413      	add	r3, r2
 80009a4:	68fa      	ldr	r2, [r7, #12]
 80009a6:	8892      	ldrh	r2, [r2, #4]
 80009a8:	fb93 f1f2 	sdiv	r1, r3, r2
 80009ac:	fb02 f201 	mul.w	r2, r2, r1
 80009b0:	1a9b      	subs	r3, r3, r2
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 80009b8:	8afa      	ldrh	r2, [r7, #22]
 80009ba:	8abb      	ldrh	r3, [r7, #20]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d00a      	beq.n	80009d6 <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	6898      	ldr	r0, [r3, #8]
 80009c4:	8abb      	ldrh	r3, [r7, #20]
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 80009ca:	8afa      	ldrh	r2, [r7, #22]
 80009cc:	8abb      	ldrh	r3, [r7, #20]
 80009ce:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80009d0:	461a      	mov	r2, r3
 80009d2:	f002 ff7f 	bl	80038d4 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 80009d6:	68f8      	ldr	r0, [r7, #12]
 80009d8:	f7ff ff6c 	bl	80008b4 <UARTTxDumpBuffer>

}
 80009dc:	bf00      	nop
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <DynamixelProtocal2>:


void DynamixelProtocal2(uint8_t *Memory, uint8_t MotorID, int16_t dataIn,
		UARTStucrture *uart)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b09a      	sub	sp, #104	; 0x68
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	460b      	mov	r3, r1
 80009f0:	72fb      	strb	r3, [r7, #11]
 80009f2:	4613      	mov	r3, r2
 80009f4:	813b      	strh	r3, [r7, #8]
	static uint16_t CRCCheck = 0;
	static uint16_t packetSize = 0;
	static uint16_t CRC_accum;

	//State Machine
	switch (State)
 80009f6:	4b9a      	ldr	r3, [pc, #616]	; (8000c60 <DynamixelProtocal2+0x27c>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b0a      	cmp	r3, #10
 80009fc:	f200 8263 	bhi.w	8000ec6 <DynamixelProtocal2+0x4e2>
 8000a00:	a201      	add	r2, pc, #4	; (adr r2, 8000a08 <DynamixelProtocal2+0x24>)
 8000a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a06:	bf00      	nop
 8000a08:	08000a35 	.word	0x08000a35
 8000a0c:	08000a47 	.word	0x08000a47
 8000a10:	08000a59 	.word	0x08000a59
 8000a14:	08000a7b 	.word	0x08000a7b
 8000a18:	08000a93 	.word	0x08000a93
 8000a1c:	08000ac9 	.word	0x08000ac9
 8000a20:	08000adb 	.word	0x08000adb
 8000a24:	08000af9 	.word	0x08000af9
 8000a28:	08000b09 	.word	0x08000b09
 8000a2c:	08000b39 	.word	0x08000b39
 8000a30:	08000b75 	.word	0x08000b75
	{
	case DNMXP_idle:
		if (dataIn == 0xFF)
 8000a34:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a38:	2bff      	cmp	r3, #255	; 0xff
 8000a3a:	f040 823f 	bne.w	8000ebc <DynamixelProtocal2+0x4d8>
			State = DNMXP_1stHeader;
 8000a3e:	4b88      	ldr	r3, [pc, #544]	; (8000c60 <DynamixelProtocal2+0x27c>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
		break;
 8000a44:	e23a      	b.n	8000ebc <DynamixelProtocal2+0x4d8>
	case DNMXP_1stHeader:
		if (dataIn == 0xFF)
 8000a46:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a4a:	2bff      	cmp	r3, #255	; 0xff
 8000a4c:	f040 8238 	bne.w	8000ec0 <DynamixelProtocal2+0x4dc>
			State = DNMXP_2ndHeader;
 8000a50:	4b83      	ldr	r3, [pc, #524]	; (8000c60 <DynamixelProtocal2+0x27c>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	701a      	strb	r2, [r3, #0]
		break;
 8000a56:	e233      	b.n	8000ec0 <DynamixelProtocal2+0x4dc>
	case DNMXP_2ndHeader:
		if (dataIn == 0xFD)
 8000a58:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a5c:	2bfd      	cmp	r3, #253	; 0xfd
 8000a5e:	d103      	bne.n	8000a68 <DynamixelProtocal2+0x84>
			State = DNMXP_3rdHeader;
 8000a60:	4b7f      	ldr	r3, [pc, #508]	; (8000c60 <DynamixelProtocal2+0x27c>)
 8000a62:	2203      	movs	r2, #3
 8000a64:	701a      	strb	r2, [r3, #0]
		else if (dataIn == 0xFF)
			; //do nothing
		else
			State = DNMXP_idle;
		break;
 8000a66:	e22d      	b.n	8000ec4 <DynamixelProtocal2+0x4e0>
		else if (dataIn == 0xFF)
 8000a68:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a6c:	2bff      	cmp	r3, #255	; 0xff
 8000a6e:	f000 8229 	beq.w	8000ec4 <DynamixelProtocal2+0x4e0>
			State = DNMXP_idle;
 8000a72:	4b7b      	ldr	r3, [pc, #492]	; (8000c60 <DynamixelProtocal2+0x27c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
		break;
 8000a78:	e224      	b.n	8000ec4 <DynamixelProtocal2+0x4e0>
	case DNMXP_3rdHeader:
		if (dataIn == 0x00)
 8000a7a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d103      	bne.n	8000a8a <DynamixelProtocal2+0xa6>
			State = DNMXP_Reserved;
 8000a82:	4b77      	ldr	r3, [pc, #476]	; (8000c60 <DynamixelProtocal2+0x27c>)
 8000a84:	2204      	movs	r2, #4
 8000a86:	701a      	strb	r2, [r3, #0]
		else
			State = DNMXP_idle;
		break;
 8000a88:	e21d      	b.n	8000ec6 <DynamixelProtocal2+0x4e2>
			State = DNMXP_idle;
 8000a8a:	4b75      	ldr	r3, [pc, #468]	; (8000c60 <DynamixelProtocal2+0x27c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
		break;
 8000a90:	e219      	b.n	8000ec6 <DynamixelProtocal2+0x4e2>
	case DNMXP_Reserved:
		if ((dataIn == MotorID) | (dataIn == 0xFE))
 8000a92:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000a96:	7afb      	ldrb	r3, [r7, #11]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	bf0c      	ite	eq
 8000a9c:	2301      	moveq	r3, #1
 8000a9e:	2300      	movne	r3, #0
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000aa6:	2bfe      	cmp	r3, #254	; 0xfe
 8000aa8:	bf0c      	ite	eq
 8000aaa:	2301      	moveq	r3, #1
 8000aac:	2300      	movne	r3, #0
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d003      	beq.n	8000ac0 <DynamixelProtocal2+0xdc>
			State = DNMXP_ID;
 8000ab8:	4b69      	ldr	r3, [pc, #420]	; (8000c60 <DynamixelProtocal2+0x27c>)
 8000aba:	2205      	movs	r2, #5
 8000abc:	701a      	strb	r2, [r3, #0]
		else
			State = DNMXP_idle;
		break;
 8000abe:	e202      	b.n	8000ec6 <DynamixelProtocal2+0x4e2>
			State = DNMXP_idle;
 8000ac0:	4b67      	ldr	r3, [pc, #412]	; (8000c60 <DynamixelProtocal2+0x27c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
		break;
 8000ac6:	e1fe      	b.n	8000ec6 <DynamixelProtocal2+0x4e2>
	case DNMXP_ID:
		datalen = dataIn & 0xFF;
 8000ac8:	893b      	ldrh	r3, [r7, #8]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	4b65      	ldr	r3, [pc, #404]	; (8000c64 <DynamixelProtocal2+0x280>)
 8000ad0:	801a      	strh	r2, [r3, #0]
		State = DNMXP_LEN1;
 8000ad2:	4b63      	ldr	r3, [pc, #396]	; (8000c60 <DynamixelProtocal2+0x27c>)
 8000ad4:	2206      	movs	r2, #6
 8000ad6:	701a      	strb	r2, [r3, #0]
		break;
 8000ad8:	e1f5      	b.n	8000ec6 <DynamixelProtocal2+0x4e2>
	case DNMXP_LEN1:
		datalen |= (dataIn & 0xFF) << 8;
 8000ada:	893b      	ldrh	r3, [r7, #8]
 8000adc:	021b      	lsls	r3, r3, #8
 8000ade:	b21a      	sxth	r2, r3
 8000ae0:	4b60      	ldr	r3, [pc, #384]	; (8000c64 <DynamixelProtocal2+0x280>)
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	b21b      	sxth	r3, r3
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	b21b      	sxth	r3, r3
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4b5d      	ldr	r3, [pc, #372]	; (8000c64 <DynamixelProtocal2+0x280>)
 8000aee:	801a      	strh	r2, [r3, #0]
		State = DNMXP_LEN2;
 8000af0:	4b5b      	ldr	r3, [pc, #364]	; (8000c60 <DynamixelProtocal2+0x27c>)
 8000af2:	2207      	movs	r2, #7
 8000af4:	701a      	strb	r2, [r3, #0]
		break;
 8000af6:	e1e6      	b.n	8000ec6 <DynamixelProtocal2+0x4e2>
	case DNMXP_LEN2:
		inst = dataIn;
 8000af8:	893b      	ldrh	r3, [r7, #8]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b5a      	ldr	r3, [pc, #360]	; (8000c68 <DynamixelProtocal2+0x284>)
 8000afe:	701a      	strb	r2, [r3, #0]
		State = DNMXP_Inst;
 8000b00:	4b57      	ldr	r3, [pc, #348]	; (8000c60 <DynamixelProtocal2+0x27c>)
 8000b02:	2208      	movs	r2, #8
 8000b04:	701a      	strb	r2, [r3, #0]
		break;
 8000b06:	e1de      	b.n	8000ec6 <DynamixelProtocal2+0x4e2>
	case DNMXP_Inst:
		if (datalen > 3)
 8000b08:	4b56      	ldr	r3, [pc, #344]	; (8000c64 <DynamixelProtocal2+0x280>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	2b03      	cmp	r3, #3
 8000b0e:	d90a      	bls.n	8000b26 <DynamixelProtocal2+0x142>
		{
			parameter[0] = dataIn;
 8000b10:	893b      	ldrh	r3, [r7, #8]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b55      	ldr	r3, [pc, #340]	; (8000c6c <DynamixelProtocal2+0x288>)
 8000b16:	701a      	strb	r2, [r3, #0]
			CollectedData = 1; //inst 1 + para[0] 1
 8000b18:	4b55      	ldr	r3, [pc, #340]	; (8000c70 <DynamixelProtocal2+0x28c>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	801a      	strh	r2, [r3, #0]
			State = DNMXP_ParameterCollect;
 8000b1e:	4b50      	ldr	r3, [pc, #320]	; (8000c60 <DynamixelProtocal2+0x27c>)
 8000b20:	2209      	movs	r2, #9
 8000b22:	701a      	strb	r2, [r3, #0]
		{
			CRCCheck = dataIn & 0xff;
			State = DNMXP_CRCAndExecute;
		}

		break;
 8000b24:	e1cf      	b.n	8000ec6 <DynamixelProtocal2+0x4e2>
			CRCCheck = dataIn & 0xff;
 8000b26:	893b      	ldrh	r3, [r7, #8]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	4b51      	ldr	r3, [pc, #324]	; (8000c74 <DynamixelProtocal2+0x290>)
 8000b2e:	801a      	strh	r2, [r3, #0]
			State = DNMXP_CRCAndExecute;
 8000b30:	4b4b      	ldr	r3, [pc, #300]	; (8000c60 <DynamixelProtocal2+0x27c>)
 8000b32:	220a      	movs	r2, #10
 8000b34:	701a      	strb	r2, [r3, #0]
		break;
 8000b36:	e1c6      	b.n	8000ec6 <DynamixelProtocal2+0x4e2>
	case DNMXP_ParameterCollect:

		if (datalen-3 > CollectedData)
 8000b38:	4b4a      	ldr	r3, [pc, #296]	; (8000c64 <DynamixelProtocal2+0x280>)
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	3b03      	subs	r3, #3
 8000b3e:	4a4c      	ldr	r2, [pc, #304]	; (8000c70 <DynamixelProtocal2+0x28c>)
 8000b40:	8812      	ldrh	r2, [r2, #0]
 8000b42:	4293      	cmp	r3, r2
 8000b44:	dd0d      	ble.n	8000b62 <DynamixelProtocal2+0x17e>
		{
			parameter[CollectedData] = dataIn;
 8000b46:	4b4a      	ldr	r3, [pc, #296]	; (8000c70 <DynamixelProtocal2+0x28c>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	893b      	ldrh	r3, [r7, #8]
 8000b4e:	b2d9      	uxtb	r1, r3
 8000b50:	4b46      	ldr	r3, [pc, #280]	; (8000c6c <DynamixelProtocal2+0x288>)
 8000b52:	5499      	strb	r1, [r3, r2]
			CollectedData++;
 8000b54:	4b46      	ldr	r3, [pc, #280]	; (8000c70 <DynamixelProtocal2+0x28c>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	4b44      	ldr	r3, [pc, #272]	; (8000c70 <DynamixelProtocal2+0x28c>)
 8000b5e:	801a      	strh	r2, [r3, #0]
		else
		{
			CRCCheck = dataIn & 0xff;
			State = DNMXP_CRCAndExecute;
		}
		break;
 8000b60:	e1b1      	b.n	8000ec6 <DynamixelProtocal2+0x4e2>
			CRCCheck = dataIn & 0xff;
 8000b62:	893b      	ldrh	r3, [r7, #8]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	4b42      	ldr	r3, [pc, #264]	; (8000c74 <DynamixelProtocal2+0x290>)
 8000b6a:	801a      	strh	r2, [r3, #0]
			State = DNMXP_CRCAndExecute;
 8000b6c:	4b3c      	ldr	r3, [pc, #240]	; (8000c60 <DynamixelProtocal2+0x27c>)
 8000b6e:	220a      	movs	r2, #10
 8000b70:	701a      	strb	r2, [r3, #0]
		break;
 8000b72:	e1a8      	b.n	8000ec6 <DynamixelProtocal2+0x4e2>
	case DNMXP_CRCAndExecute:
		CRCCheck |= (dataIn & 0xff) << 8;
 8000b74:	893b      	ldrh	r3, [r7, #8]
 8000b76:	021b      	lsls	r3, r3, #8
 8000b78:	b21a      	sxth	r2, r3
 8000b7a:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <DynamixelProtocal2+0x290>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	b21b      	sxth	r3, r3
 8000b80:	4313      	orrs	r3, r2
 8000b82:	b21b      	sxth	r3, r3
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	4b3b      	ldr	r3, [pc, #236]	; (8000c74 <DynamixelProtocal2+0x290>)
 8000b88:	801a      	strh	r2, [r3, #0]
		//Check CRC
		CRC_accum = 0;
 8000b8a:	4b3b      	ldr	r3, [pc, #236]	; (8000c78 <DynamixelProtocal2+0x294>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	801a      	strh	r2, [r3, #0]
		packetSize = datalen + 7;
 8000b90:	4b34      	ldr	r3, [pc, #208]	; (8000c64 <DynamixelProtocal2+0x280>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	3307      	adds	r3, #7
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	4b38      	ldr	r3, [pc, #224]	; (8000c7c <DynamixelProtocal2+0x298>)
 8000b9a:	801a      	strh	r2, [r3, #0]
		//check overlapse buffer
		if (uart->RxTail - packetSize >= 0) //not overlapse
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	8a9b      	ldrh	r3, [r3, #20]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b36      	ldr	r3, [pc, #216]	; (8000c7c <DynamixelProtocal2+0x298>)
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db16      	blt.n	8000bda <DynamixelProtocal2+0x1f6>
		{
			CRC_accum = update_crc(CRC_accum,
 8000bac:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <DynamixelProtocal2+0x294>)
 8000bae:	8818      	ldrh	r0, [r3, #0]
					&(uart->RxBuffer[uart->RxTail - packetSize]),
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	691b      	ldr	r3, [r3, #16]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	8a92      	ldrh	r2, [r2, #20]
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4a30      	ldr	r2, [pc, #192]	; (8000c7c <DynamixelProtocal2+0x298>)
 8000bbc:	8812      	ldrh	r2, [r2, #0]
 8000bbe:	1a8a      	subs	r2, r1, r2
 8000bc0:	1899      	adds	r1, r3, r2
			CRC_accum = update_crc(CRC_accum,
 8000bc2:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <DynamixelProtocal2+0x298>)
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	3b02      	subs	r3, #2
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	461a      	mov	r2, r3
 8000bcc:	f000 f98e 	bl	8000eec <update_crc>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b28      	ldr	r3, [pc, #160]	; (8000c78 <DynamixelProtocal2+0x294>)
 8000bd6:	801a      	strh	r2, [r3, #0]
 8000bd8:	e02d      	b.n	8000c36 <DynamixelProtocal2+0x252>
					packetSize - 2);
		}
		else//overlapse
		{
			uint16_t firstPartStart = uart->RxTail - packetSize + uart->RxLen;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	8a9a      	ldrh	r2, [r3, #20]
 8000bde:	4b27      	ldr	r3, [pc, #156]	; (8000c7c <DynamixelProtocal2+0x298>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	88db      	ldrh	r3, [r3, #6]
 8000bea:	4413      	add	r3, r2
 8000bec:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			CRC_accum = update_crc(CRC_accum, &(uart->RxBuffer[firstPartStart]),
 8000bf0:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <DynamixelProtocal2+0x294>)
 8000bf2:	8818      	ldrh	r0, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	691a      	ldr	r2, [r3, #16]
 8000bf8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000bfc:	18d1      	adds	r1, r2, r3
					uart->RxLen - firstPartStart);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	88da      	ldrh	r2, [r3, #6]
			CRC_accum = update_crc(CRC_accum, &(uart->RxBuffer[firstPartStart]),
 8000c02:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	f000 f96e 	bl	8000eec <update_crc>
 8000c10:	4603      	mov	r3, r0
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <DynamixelProtocal2+0x294>)
 8000c16:	801a      	strh	r2, [r3, #0]
			CRC_accum = update_crc(CRC_accum, uart->RxBuffer, uart->RxTail - 2);
 8000c18:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <DynamixelProtocal2+0x294>)
 8000c1a:	8818      	ldrh	r0, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6919      	ldr	r1, [r3, #16]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	8a9b      	ldrh	r3, [r3, #20]
 8000c24:	3b02      	subs	r3, #2
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	461a      	mov	r2, r3
 8000c2a:	f000 f95f 	bl	8000eec <update_crc>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <DynamixelProtocal2+0x294>)
 8000c34:	801a      	strh	r2, [r3, #0]

		}

		if (CRC_accum == CRCCheck)
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <DynamixelProtocal2+0x294>)
 8000c38:	881a      	ldrh	r2, [r3, #0]
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <DynamixelProtocal2+0x290>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	f040 8112 	bne.w	8000e68 <DynamixelProtocal2+0x484>
		{
			switch (inst)
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <DynamixelProtocal2+0x284>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	f000 809f 	beq.w	8000d8c <DynamixelProtocal2+0x3a8>
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	f300 80e0 	bgt.w	8000e14 <DynamixelProtocal2+0x430>
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d013      	beq.n	8000c80 <DynamixelProtocal2+0x29c>
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d03b      	beq.n	8000cd4 <DynamixelProtocal2+0x2f0>
 8000c5c:	e0da      	b.n	8000e14 <DynamixelProtocal2+0x430>
 8000c5e:	bf00      	nop
 8000c60:	200001e6 	.word	0x200001e6
 8000c64:	200001e8 	.word	0x200001e8
 8000c68:	200001ea 	.word	0x200001ea
 8000c6c:	200001ec 	.word	0x200001ec
 8000c70:	200002ec 	.word	0x200002ec
 8000c74:	200002ee 	.word	0x200002ee
 8000c78:	200002f0 	.word	0x200002f0
 8000c7c:	200002f2 	.word	0x200002f2
			{
			case 0x01:// ping
			{
				//create packet template
				uint8_t temp[] =
 8000c80:	4a93      	ldr	r2, [pc, #588]	; (8000ed0 <DynamixelProtocal2+0x4ec>)
 8000c82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c86:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c88:	c303      	stmia	r3!, {r0, r1}
 8000c8a:	801a      	strh	r2, [r3, #0]
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	0c12      	lsrs	r2, r2, #16
 8000c90:	701a      	strb	r2, [r3, #0]
				{ 0xff, 0xff, 0xfd, 0x00, 0x00, 0x05, 0x00, 0x55, 0x00, 0x00,
						0x00 };
				//config MotorID
				temp[4] = MotorID;
 8000c92:	7afb      	ldrb	r3, [r7, #11]
 8000c94:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
				//calcuate CRC
				uint16_t crc_calc = update_crc(0, temp, 9);
 8000c98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c9c:	2209      	movs	r2, #9
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f000 f923 	bl	8000eec <update_crc>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				temp[9] = crc_calc & 0xff;
 8000cac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
				temp[10] = (crc_calc >> 8) & 0xFF;
 8000cb6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000cba:	0a1b      	lsrs	r3, r3, #8
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
				//Sent Response Packet
				UARTTxWrite(uart, temp, 11);
 8000cc4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cc8:	220b      	movs	r2, #11
 8000cca:	4619      	mov	r1, r3
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff fe41 	bl	8000954 <UARTTxWrite>
				break;
 8000cd2:	e0ef      	b.n	8000eb4 <DynamixelProtocal2+0x4d0>
			}

			case 0x02://READ
			{
				uint16_t startAddr = (parameter[0]&0xFF)|(parameter[1]<<8 &0xFF);
 8000cd4:	4b7f      	ldr	r3, [pc, #508]	; (8000ed4 <DynamixelProtocal2+0x4f0>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				uint16_t numberOfDataToRead = (parameter[2]&0xFF)|(parameter[3]<<8 &0xFF);
 8000cdc:	4b7d      	ldr	r3, [pc, #500]	; (8000ed4 <DynamixelProtocal2+0x4f0>)
 8000cde:	789b      	ldrb	r3, [r3, #2]
 8000ce0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				uint8_t temp[] = {0xff,0xff,0xfd,0x00,0x00,0x00,0x00,0x55,0x00};
 8000ce4:	4a7c      	ldr	r2, [pc, #496]	; (8000ed8 <DynamixelProtocal2+0x4f4>)
 8000ce6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cea:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cec:	c303      	stmia	r3!, {r0, r1}
 8000cee:	701a      	strb	r2, [r3, #0]
				temp[4] = MotorID;
 8000cf0:	7afb      	ldrb	r3, [r7, #11]
 8000cf2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				temp[5] = (numberOfDataToRead + 4) & 0xff ; // +inst+err+crc1+crc2
 8000cf6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
				temp[6] = ((numberOfDataToRead + 4)>>8) & 0xff ;
 8000d04:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000d08:	3304      	adds	r3, #4
 8000d0a:	121b      	asrs	r3, r3, #8
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
				uint16_t crc_calc = update_crc(0, temp, 9);
 8000d12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d16:	2209      	movs	r2, #9
 8000d18:	4619      	mov	r1, r3
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f000 f8e6 	bl	8000eec <update_crc>
 8000d20:	4603      	mov	r3, r0
 8000d22:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
				crc_calc = update_crc(crc_calc ,&(Memory[startAddr]),numberOfDataToRead);
 8000d26:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	18d1      	adds	r1, r2, r3
 8000d2e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8000d32:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f8d8 	bl	8000eec <update_crc>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
				uint8_t crctemp[2];
				crctemp[0] = crc_calc&0xff;
 8000d42:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				crctemp[1] = (crc_calc>>8)&0xff;
 8000d4c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d50:	0a1b      	lsrs	r3, r3, #8
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				UARTTxWrite(uart, temp,9);
 8000d5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d5e:	2209      	movs	r2, #9
 8000d60:	4619      	mov	r1, r3
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff fdf6 	bl	8000954 <UARTTxWrite>
				UARTTxWrite(uart, &(Memory[startAddr]),numberOfDataToRead);
 8000d68:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	4413      	add	r3, r2
 8000d70:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8000d74:	4619      	mov	r1, r3
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff fdec 	bl	8000954 <UARTTxWrite>
				UARTTxWrite(uart, crctemp,2);
 8000d7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d80:	2202      	movs	r2, #2
 8000d82:	4619      	mov	r1, r3
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff fde5 	bl	8000954 <UARTTxWrite>
				break;
 8000d8a:	e093      	b.n	8000eb4 <DynamixelProtocal2+0x4d0>
			}
			case 0x03://WRITE
			{
				uint16_t startAddr = (parameter[0]&0xFF)|(parameter[1]<<8 &0xFF);
 8000d8c:	4b51      	ldr	r3, [pc, #324]	; (8000ed4 <DynamixelProtocal2+0x4f0>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
				uint16_t numberOfDataToRead = (parameter[2]&0xFF)|(parameter[3]<<8 &0xFF);
 8000d94:	4b4f      	ldr	r3, [pc, #316]	; (8000ed4 <DynamixelProtocal2+0x4f0>)
 8000d96:	789b      	ldrb	r3, [r3, #2]
 8000d98:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
				uint8_t temp[] = {0xff,0xff,0xfd,0x00,0x00,0x04,0x00,0x55,0x00};
 8000d9c:	4a4f      	ldr	r2, [pc, #316]	; (8000edc <DynamixelProtocal2+0x4f8>)
 8000d9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000da4:	c303      	stmia	r3!, {r0, r1}
 8000da6:	701a      	strb	r2, [r3, #0]
				temp[4] = MotorID;
 8000da8:	7afb      	ldrb	r3, [r7, #11]
 8000daa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				uint16_t crc_calc = update_crc(0, temp, 9);
 8000dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db2:	2209      	movs	r2, #9
 8000db4:	4619      	mov	r1, r3
 8000db6:	2000      	movs	r0, #0
 8000db8:	f000 f898 	bl	8000eec <update_crc>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				crc_calc = update_crc(crc_calc ,&(Memory[startAddr]),numberOfDataToRead);
 8000dc2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	18d1      	adds	r1, r2, r3
 8000dca:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8000dce:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f88a 	bl	8000eec <update_crc>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				uint8_t crctemp[2];
				crctemp[0] = crc_calc&0xff;
 8000dde:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				crctemp[1] = (crc_calc>>8)&0xff;
 8000de8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				UARTTxWrite(uart, temp,9);
 8000df6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dfa:	2209      	movs	r2, #9
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff fda8 	bl	8000954 <UARTTxWrite>
				UARTTxWrite(uart, crctemp,2);
 8000e04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e08:	2202      	movs	r2, #2
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff fda1 	bl	8000954 <UARTTxWrite>
				break;
 8000e12:	e04f      	b.n	8000eb4 <DynamixelProtocal2+0x4d0>
			}
			default: //Unknown Inst
			{
				uint8_t temp[] =
 8000e14:	4a32      	ldr	r2, [pc, #200]	; (8000ee0 <DynamixelProtocal2+0x4fc>)
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e1c:	c303      	stmia	r3!, {r0, r1}
 8000e1e:	801a      	strh	r2, [r3, #0]
 8000e20:	3302      	adds	r3, #2
 8000e22:	0c12      	lsrs	r2, r2, #16
 8000e24:	701a      	strb	r2, [r3, #0]
				{ 0xff, 0xff, 0xfd, 0x00, 0x00, 0x05, 0x00, 0x55, 0x02, 0x00,
						0x00 };
				temp[4] = MotorID;
 8000e26:	7afb      	ldrb	r3, [r7, #11]
 8000e28:	f887 3020 	strb.w	r3, [r7, #32]
				uint16_t crc_calc = update_crc(0, temp, 9);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	2209      	movs	r2, #9
 8000e32:	4619      	mov	r1, r3
 8000e34:	2000      	movs	r0, #0
 8000e36:	f000 f859 	bl	8000eec <update_crc>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				temp[9] = crc_calc & 0xff;
 8000e40:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				temp[10] = (crc_calc >> 8) & 0xFF;
 8000e4a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000e4e:	0a1b      	lsrs	r3, r3, #8
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				UARTTxWrite(uart, temp, 11);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	220b      	movs	r2, #11
 8000e5e:	4619      	mov	r1, r3
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff fd77 	bl	8000954 <UARTTxWrite>

				break;
 8000e66:	e025      	b.n	8000eb4 <DynamixelProtocal2+0x4d0>
			}
			}
		}
		else //crc error
		{
			uint8_t temp[] =
 8000e68:	4a1e      	ldr	r2, [pc, #120]	; (8000ee4 <DynamixelProtocal2+0x500>)
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e70:	c303      	stmia	r3!, {r0, r1}
 8000e72:	801a      	strh	r2, [r3, #0]
 8000e74:	3302      	adds	r3, #2
 8000e76:	0c12      	lsrs	r2, r2, #16
 8000e78:	701a      	strb	r2, [r3, #0]
			{ 0xff, 0xff, 0xfd, 0x00, 0x00, 0x05, 0x00, 0x55, 0x03, 0x00, 0x00 };
			temp[4] = MotorID;
 8000e7a:	7afb      	ldrb	r3, [r7, #11]
 8000e7c:	753b      	strb	r3, [r7, #20]
			uint16_t crc_calc = update_crc(0, temp, 9);
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	2209      	movs	r2, #9
 8000e84:	4619      	mov	r1, r3
 8000e86:	2000      	movs	r0, #0
 8000e88:	f000 f830 	bl	8000eec <update_crc>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			temp[9] = crc_calc & 0xff;
 8000e92:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	767b      	strb	r3, [r7, #25]
			temp[10] = (crc_calc >> 8) & 0xFF;
 8000e9a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	76bb      	strb	r3, [r7, #26]
			UARTTxWrite(uart, temp, 11);
 8000ea6:	f107 0310 	add.w	r3, r7, #16
 8000eaa:	220b      	movs	r2, #11
 8000eac:	4619      	mov	r1, r3
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff fd50 	bl	8000954 <UARTTxWrite>
		}
		State = DNMXP_idle;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <DynamixelProtocal2+0x504>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
		break;
 8000eba:	e004      	b.n	8000ec6 <DynamixelProtocal2+0x4e2>
		break;
 8000ebc:	bf00      	nop
 8000ebe:	e002      	b.n	8000ec6 <DynamixelProtocal2+0x4e2>
		break;
 8000ec0:	bf00      	nop
 8000ec2:	e000      	b.n	8000ec6 <DynamixelProtocal2+0x4e2>
		break;
 8000ec4:	bf00      	nop
	}

}
 8000ec6:	bf00      	nop
 8000ec8:	3768      	adds	r7, #104	; 0x68
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	08003a28 	.word	0x08003a28
 8000ed4:	200001ec 	.word	0x200001ec
 8000ed8:	08003a34 	.word	0x08003a34
 8000edc:	08003a40 	.word	0x08003a40
 8000ee0:	08003a4c 	.word	0x08003a4c
 8000ee4:	08003a58 	.word	0x08003a58
 8000ee8:	200001e6 	.word	0x200001e6

08000eec <update_crc>:
unsigned short update_crc(unsigned short crc_accum, unsigned char *data_blk_ptr,
		unsigned short data_blk_size)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	6019      	str	r1, [r3, #0]
 8000ef8:	4611      	mov	r1, r2
 8000efa:	1dbb      	adds	r3, r7, #6
 8000efc:	4602      	mov	r2, r0
 8000efe:	801a      	strh	r2, [r3, #0]
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	460a      	mov	r2, r1
 8000f04:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] =
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	4a1e      	ldr	r2, [pc, #120]	; (8000f84 <update_crc+0x98>)
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	4611      	mov	r1, r2
 8000f10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f14:	461a      	mov	r2, r3
 8000f16:	f002 fcdd 	bl	80038d4 <memcpy>
			0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252, 0x0270,
			0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220,
			0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231, 0x8213,
			0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202 };

	for (j = 0; j < data_blk_size; j++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000f20:	e023      	b.n	8000f6a <update_crc+0x7e>
	{
		i = ((unsigned short) (crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000f22:	1dbb      	adds	r3, r7, #6
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	0a1b      	lsrs	r3, r3, #8
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000f2e:	4639      	mov	r1, r7
 8000f30:	6809      	ldr	r1, [r1, #0]
 8000f32:	440b      	add	r3, r1
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	4053      	eors	r3, r2
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000f42:	1dbb      	adds	r3, r7, #6
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000f56:	b21b      	sxth	r3, r3
 8000f58:	4053      	eors	r3, r2
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	1dbb      	adds	r3, r7, #6
 8000f5e:	801a      	strh	r2, [r3, #0]
	for (j = 0; j < data_blk_size; j++)
 8000f60:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000f64:	3301      	adds	r3, #1
 8000f66:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d3d5      	bcc.n	8000f22 <update_crc+0x36>
	}

	return crc_accum;
 8000f76:	1dbb      	adds	r3, r7, #6
 8000f78:	881b      	ldrh	r3, [r3, #0]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	08003a64 	.word	0x08003a64

08000f88 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f90:	e7fe      	b.n	8000f90 <Error_Handler+0x8>
	...

08000f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fd2:	2007      	movs	r0, #7
 8000fd4:	f000 fab8 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a4c      	ldr	r2, [pc, #304]	; (8001134 <HAL_UART_MspInit+0x150>)
 8001002:	4293      	cmp	r3, r2
 8001004:	f040 8091 	bne.w	800112a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	4b4a      	ldr	r3, [pc, #296]	; (8001138 <HAL_UART_MspInit+0x154>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	4a49      	ldr	r2, [pc, #292]	; (8001138 <HAL_UART_MspInit+0x154>)
 8001012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001016:	6413      	str	r3, [r2, #64]	; 0x40
 8001018:	4b47      	ldr	r3, [pc, #284]	; (8001138 <HAL_UART_MspInit+0x154>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	4b43      	ldr	r3, [pc, #268]	; (8001138 <HAL_UART_MspInit+0x154>)
 800102a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102c:	4a42      	ldr	r2, [pc, #264]	; (8001138 <HAL_UART_MspInit+0x154>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6313      	str	r3, [r2, #48]	; 0x30
 8001034:	4b40      	ldr	r3, [pc, #256]	; (8001138 <HAL_UART_MspInit+0x154>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001040:	230c      	movs	r3, #12
 8001042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001050:	2307      	movs	r3, #7
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4838      	ldr	r0, [pc, #224]	; (800113c <HAL_UART_MspInit+0x158>)
 800105c:	f000 feb8 	bl	8001dd0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001060:	4b37      	ldr	r3, [pc, #220]	; (8001140 <HAL_UART_MspInit+0x15c>)
 8001062:	4a38      	ldr	r2, [pc, #224]	; (8001144 <HAL_UART_MspInit+0x160>)
 8001064:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001066:	4b36      	ldr	r3, [pc, #216]	; (8001140 <HAL_UART_MspInit+0x15c>)
 8001068:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800106c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800106e:	4b34      	ldr	r3, [pc, #208]	; (8001140 <HAL_UART_MspInit+0x15c>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001074:	4b32      	ldr	r3, [pc, #200]	; (8001140 <HAL_UART_MspInit+0x15c>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800107a:	4b31      	ldr	r3, [pc, #196]	; (8001140 <HAL_UART_MspInit+0x15c>)
 800107c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001080:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001082:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <HAL_UART_MspInit+0x15c>)
 8001084:	2200      	movs	r2, #0
 8001086:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001088:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <HAL_UART_MspInit+0x15c>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800108e:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <HAL_UART_MspInit+0x15c>)
 8001090:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001094:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001096:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <HAL_UART_MspInit+0x15c>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800109c:	4b28      	ldr	r3, [pc, #160]	; (8001140 <HAL_UART_MspInit+0x15c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80010a2:	4827      	ldr	r0, [pc, #156]	; (8001140 <HAL_UART_MspInit+0x15c>)
 80010a4:	f000 fa92 	bl	80015cc <HAL_DMA_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80010ae:	f7ff ff6b 	bl	8000f88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a22      	ldr	r2, [pc, #136]	; (8001140 <HAL_UART_MspInit+0x15c>)
 80010b6:	639a      	str	r2, [r3, #56]	; 0x38
 80010b8:	4a21      	ldr	r2, [pc, #132]	; (8001140 <HAL_UART_MspInit+0x15c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80010be:	4b22      	ldr	r3, [pc, #136]	; (8001148 <HAL_UART_MspInit+0x164>)
 80010c0:	4a22      	ldr	r2, [pc, #136]	; (800114c <HAL_UART_MspInit+0x168>)
 80010c2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <HAL_UART_MspInit+0x164>)
 80010c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <HAL_UART_MspInit+0x164>)
 80010ce:	2240      	movs	r2, #64	; 0x40
 80010d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <HAL_UART_MspInit+0x164>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <HAL_UART_MspInit+0x164>)
 80010da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010de:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010e0:	4b19      	ldr	r3, [pc, #100]	; (8001148 <HAL_UART_MspInit+0x164>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <HAL_UART_MspInit+0x164>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <HAL_UART_MspInit+0x164>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <HAL_UART_MspInit+0x164>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <HAL_UART_MspInit+0x164>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80010fe:	4812      	ldr	r0, [pc, #72]	; (8001148 <HAL_UART_MspInit+0x164>)
 8001100:	f000 fa64 	bl	80015cc <HAL_DMA_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800110a:	f7ff ff3d 	bl	8000f88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a0d      	ldr	r2, [pc, #52]	; (8001148 <HAL_UART_MspInit+0x164>)
 8001112:	635a      	str	r2, [r3, #52]	; 0x34
 8001114:	4a0c      	ldr	r2, [pc, #48]	; (8001148 <HAL_UART_MspInit+0x164>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	2026      	movs	r0, #38	; 0x26
 8001120:	f000 fa1d 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001124:	2026      	movs	r0, #38	; 0x26
 8001126:	f000 fa36 	bl	8001596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	; 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40004400 	.word	0x40004400
 8001138:	40023800 	.word	0x40023800
 800113c:	40020000 	.word	0x40020000
 8001140:	20000300 	.word	0x20000300
 8001144:	40026088 	.word	0x40026088
 8001148:	20000360 	.word	0x20000360
 800114c:	400260a0 	.word	0x400260a0

08001150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <NMI_Handler+0x4>

08001156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <HardFault_Handler+0x4>

0800115c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <MemManage_Handler+0x4>

08001162 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <BusFault_Handler+0x4>

08001168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <UsageFault_Handler+0x4>

0800116e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119c:	f000 f8e4 	bl	8001368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <DMA1_Stream5_IRQHandler+0x10>)
 80011aa:	f000 fba7 	bl	80018fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000300 	.word	0x20000300

080011b8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <DMA1_Stream6_IRQHandler+0x10>)
 80011be:	f000 fb9d 	bl	80018fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000360 	.word	0x20000360

080011cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <USART2_IRQHandler+0x10>)
 80011d2:	f001 fcf9 	bl	8002bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200003c0 	.word	0x200003c0

080011e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e8:	4a14      	ldr	r2, [pc, #80]	; (800123c <_sbrk+0x5c>)
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <_sbrk+0x60>)
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <_sbrk+0x64>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <_sbrk+0x68>)
 8001200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	429a      	cmp	r2, r3
 800120e:	d207      	bcs.n	8001220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001210:	f002 fb36 	bl	8003880 <__errno>
 8001214:	4603      	mov	r3, r0
 8001216:	220c      	movs	r2, #12
 8001218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	e009      	b.n	8001234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <_sbrk+0x64>)
 8001230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20020000 	.word	0x20020000
 8001240:	00000400 	.word	0x00000400
 8001244:	200002f4 	.word	0x200002f4
 8001248:	20000418 	.word	0x20000418

0800124c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <SystemInit+0x20>)
 8001252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <SystemInit+0x20>)
 8001258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800125c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001276:	490e      	ldr	r1, [pc, #56]	; (80012b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001278:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128a:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800128c:	4c0b      	ldr	r4, [pc, #44]	; (80012bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800129a:	f7ff ffd7 	bl	800124c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800129e:	f002 faf5 	bl	800388c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012a2:	f7ff f915 	bl	80004d0 <main>
  bx  lr    
 80012a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012b4:	08003c94 	.word	0x08003c94
  ldr r2, =_sbss
 80012b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012bc:	20000418 	.word	0x20000418

080012c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c0:	e7fe      	b.n	80012c0 <ADC_IRQHandler>
	...

080012c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_Init+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <HAL_Init+0x40>)
 80012ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012d4:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <HAL_Init+0x40>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <HAL_Init+0x40>)
 80012da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_Init+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a07      	ldr	r2, [pc, #28]	; (8001304 <HAL_Init+0x40>)
 80012e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ec:	2003      	movs	r0, #3
 80012ee:	f000 f92b 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f000 f808 	bl	8001308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f8:	f7ff fe4c 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023c00 	.word	0x40023c00

08001308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_InitTick+0x54>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_InitTick+0x58>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4619      	mov	r1, r3
 800131a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001322:	fbb2 f3f3 	udiv	r3, r2, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f943 	bl	80015b2 <HAL_SYSTICK_Config>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e00e      	b.n	8001354 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b0f      	cmp	r3, #15
 800133a:	d80a      	bhi.n	8001352 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800133c:	2200      	movs	r2, #0
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	f04f 30ff 	mov.w	r0, #4294967295
 8001344:	f000 f90b 	bl	800155e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001348:	4a06      	ldr	r2, [pc, #24]	; (8001364 <HAL_InitTick+0x5c>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	e000      	b.n	8001354 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000000 	.word	0x20000000
 8001360:	20000008 	.word	0x20000008
 8001364:	20000004 	.word	0x20000004

08001368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_IncTick+0x20>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_IncTick+0x24>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4413      	add	r3, r2
 8001378:	4a04      	ldr	r2, [pc, #16]	; (800138c <HAL_IncTick+0x24>)
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000008 	.word	0x20000008
 800138c:	20000404 	.word	0x20000404

08001390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return uwTick;
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <HAL_GetTick+0x14>)
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000404 	.word	0x20000404

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013da:	4a04      	ldr	r2, [pc, #16]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	60d3      	str	r3, [r2, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	db0b      	blt.n	8001436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 021f 	and.w	r2, r3, #31
 8001424:	4907      	ldr	r1, [pc, #28]	; (8001444 <__NVIC_EnableIRQ+0x38>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	2001      	movs	r0, #1
 800142e:	fa00 f202 	lsl.w	r2, r0, r2
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000e100 	.word	0xe000e100

08001448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	db0a      	blt.n	8001472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	490c      	ldr	r1, [pc, #48]	; (8001494 <__NVIC_SetPriority+0x4c>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	440b      	add	r3, r1
 800146c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001470:	e00a      	b.n	8001488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4908      	ldr	r1, [pc, #32]	; (8001498 <__NVIC_SetPriority+0x50>)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3b04      	subs	r3, #4
 8001480:	0112      	lsls	r2, r2, #4
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	440b      	add	r3, r1
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf28      	it	cs
 80014ba:	2304      	movcs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3304      	adds	r3, #4
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	4313      	orrs	r3, r2
         );
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3724      	adds	r7, #36	; 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001514:	d301      	bcc.n	800151a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001516:	2301      	movs	r3, #1
 8001518:	e00f      	b.n	800153a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <SysTick_Config+0x40>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001522:	210f      	movs	r1, #15
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f7ff ff8e 	bl	8001448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <SysTick_Config+0x40>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001532:	4b04      	ldr	r3, [pc, #16]	; (8001544 <SysTick_Config+0x40>)
 8001534:	2207      	movs	r2, #7
 8001536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	e000e010 	.word	0xe000e010

08001548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff29 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001570:	f7ff ff3e 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 8001574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	6978      	ldr	r0, [r7, #20]
 800157c:	f7ff ff8e 	bl	800149c <NVIC_EncodePriority>
 8001580:	4602      	mov	r2, r0
 8001582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff5d 	bl	8001448 <__NVIC_SetPriority>
}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff31 	bl	800140c <__NVIC_EnableIRQ>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ffa2 	bl	8001504 <SysTick_Config>
 80015c0:	4603      	mov	r3, r0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015d8:	f7ff feda 	bl	8001390 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e099      	b.n	800171c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2202      	movs	r2, #2
 80015f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0201 	bic.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001608:	e00f      	b.n	800162a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800160a:	f7ff fec1 	bl	8001390 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b05      	cmp	r3, #5
 8001616:	d908      	bls.n	800162a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2220      	movs	r2, #32
 800161c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2203      	movs	r2, #3
 8001622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e078      	b.n	800171c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1e8      	bne.n	800160a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	4b38      	ldr	r3, [pc, #224]	; (8001724 <HAL_DMA_Init+0x158>)
 8001644:	4013      	ands	r3, r2
 8001646:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001656:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	4313      	orrs	r3, r2
 800167a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001680:	2b04      	cmp	r3, #4
 8001682:	d107      	bne.n	8001694 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	4313      	orrs	r3, r2
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	4313      	orrs	r3, r2
 8001692:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	f023 0307 	bic.w	r3, r3, #7
 80016aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d117      	bne.n	80016ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00e      	beq.n	80016ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 fb01 	bl	8001cd8 <DMA_CheckFifoParam>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d008      	beq.n	80016ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2240      	movs	r2, #64	; 0x40
 80016e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80016ea:	2301      	movs	r3, #1
 80016ec:	e016      	b.n	800171c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 fab8 	bl	8001c6c <DMA_CalcBaseAndBitshift>
 80016fc:	4603      	mov	r3, r0
 80016fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001704:	223f      	movs	r2, #63	; 0x3f
 8001706:	409a      	lsls	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	f010803f 	.word	0xf010803f

08001728 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <HAL_DMA_Start_IT+0x26>
 800174a:	2302      	movs	r3, #2
 800174c:	e040      	b.n	80017d0 <HAL_DMA_Start_IT+0xa8>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b01      	cmp	r3, #1
 8001760:	d12f      	bne.n	80017c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2202      	movs	r2, #2
 8001766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 fa4a 	bl	8001c10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001780:	223f      	movs	r2, #63	; 0x3f
 8001782:	409a      	lsls	r2, r3
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0216 	orr.w	r2, r2, #22
 8001796:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0208 	orr.w	r2, r2, #8
 80017ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0201 	orr.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	e005      	b.n	80017ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017ca:	2302      	movs	r3, #2
 80017cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017e6:	f7ff fdd3 	bl	8001390 <HAL_GetTick>
 80017ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d008      	beq.n	800180a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e052      	b.n	80018b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0216 	bic.w	r2, r2, #22
 8001818:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	695a      	ldr	r2, [r3, #20]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001828:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	2b00      	cmp	r3, #0
 8001830:	d103      	bne.n	800183a <HAL_DMA_Abort+0x62>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001836:	2b00      	cmp	r3, #0
 8001838:	d007      	beq.n	800184a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0208 	bic.w	r2, r2, #8
 8001848:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0201 	bic.w	r2, r2, #1
 8001858:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800185a:	e013      	b.n	8001884 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800185c:	f7ff fd98 	bl	8001390 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b05      	cmp	r3, #5
 8001868:	d90c      	bls.n	8001884 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2220      	movs	r2, #32
 800186e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2203      	movs	r2, #3
 800187c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e015      	b.n	80018b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1e4      	bne.n	800185c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001896:	223f      	movs	r2, #63	; 0x3f
 8001898:	409a      	lsls	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d004      	beq.n	80018d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2280      	movs	r2, #128	; 0x80
 80018d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00c      	b.n	80018f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2205      	movs	r2, #5
 80018da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0201 	bic.w	r2, r2, #1
 80018ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001908:	4b92      	ldr	r3, [pc, #584]	; (8001b54 <HAL_DMA_IRQHandler+0x258>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a92      	ldr	r2, [pc, #584]	; (8001b58 <HAL_DMA_IRQHandler+0x25c>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	0a9b      	lsrs	r3, r3, #10
 8001914:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001926:	2208      	movs	r2, #8
 8001928:	409a      	lsls	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4013      	ands	r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d01a      	beq.n	8001968 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d013      	beq.n	8001968 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0204 	bic.w	r2, r2, #4
 800194e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001954:	2208      	movs	r2, #8
 8001956:	409a      	lsls	r2, r3
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001960:	f043 0201 	orr.w	r2, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196c:	2201      	movs	r2, #1
 800196e:	409a      	lsls	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4013      	ands	r3, r2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d012      	beq.n	800199e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00b      	beq.n	800199e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198a:	2201      	movs	r2, #1
 800198c:	409a      	lsls	r2, r3
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001996:	f043 0202 	orr.w	r2, r3, #2
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a2:	2204      	movs	r2, #4
 80019a4:	409a      	lsls	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d012      	beq.n	80019d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00b      	beq.n	80019d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c0:	2204      	movs	r2, #4
 80019c2:	409a      	lsls	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019cc:	f043 0204 	orr.w	r2, r3, #4
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d8:	2210      	movs	r2, #16
 80019da:	409a      	lsls	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4013      	ands	r3, r2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d043      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d03c      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f6:	2210      	movs	r2, #16
 80019f8:	409a      	lsls	r2, r3
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d018      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d108      	bne.n	8001a2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d024      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	4798      	blx	r3
 8001a2a:	e01f      	b.n	8001a6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d01b      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	4798      	blx	r3
 8001a3c:	e016      	b.n	8001a6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d107      	bne.n	8001a5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0208 	bic.w	r2, r2, #8
 8001a5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a70:	2220      	movs	r2, #32
 8001a72:	409a      	lsls	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 808e 	beq.w	8001b9a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0310 	and.w	r3, r3, #16
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 8086 	beq.w	8001b9a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a92:	2220      	movs	r2, #32
 8001a94:	409a      	lsls	r2, r3
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b05      	cmp	r3, #5
 8001aa4:	d136      	bne.n	8001b14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0216 	bic.w	r2, r2, #22
 8001ab4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695a      	ldr	r2, [r3, #20]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ac4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d103      	bne.n	8001ad6 <HAL_DMA_IRQHandler+0x1da>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d007      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0208 	bic.w	r2, r2, #8
 8001ae4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aea:	223f      	movs	r2, #63	; 0x3f
 8001aec:	409a      	lsls	r2, r3
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d07d      	beq.n	8001c06 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	4798      	blx	r3
        }
        return;
 8001b12:	e078      	b.n	8001c06 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d01c      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d108      	bne.n	8001b42 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d030      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	4798      	blx	r3
 8001b40:	e02b      	b.n	8001b9a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d027      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	4798      	blx	r3
 8001b52:	e022      	b.n	8001b9a <HAL_DMA_IRQHandler+0x29e>
 8001b54:	20000000 	.word	0x20000000
 8001b58:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10f      	bne.n	8001b8a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0210 	bic.w	r2, r2, #16
 8001b78:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d032      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d022      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2205      	movs	r2, #5
 8001bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0201 	bic.w	r2, r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d307      	bcc.n	8001be2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f2      	bne.n	8001bc6 <HAL_DMA_IRQHandler+0x2ca>
 8001be0:	e000      	b.n	8001be4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001be2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4798      	blx	r3
 8001c04:	e000      	b.n	8001c08 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001c06:	bf00      	nop
    }
  }
}
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop

08001c10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b40      	cmp	r3, #64	; 0x40
 8001c3c:	d108      	bne.n	8001c50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c4e:	e007      	b.n	8001c60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	60da      	str	r2, [r3, #12]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	3b10      	subs	r3, #16
 8001c7c:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <DMA_CalcBaseAndBitshift+0x64>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	091b      	lsrs	r3, r3, #4
 8001c84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c86:	4a13      	ldr	r2, [pc, #76]	; (8001cd4 <DMA_CalcBaseAndBitshift+0x68>)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d909      	bls.n	8001cae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ca2:	f023 0303 	bic.w	r3, r3, #3
 8001ca6:	1d1a      	adds	r2, r3, #4
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	659a      	str	r2, [r3, #88]	; 0x58
 8001cac:	e007      	b.n	8001cbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cb6:	f023 0303 	bic.w	r3, r3, #3
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	aaaaaaab 	.word	0xaaaaaaab
 8001cd4:	08003c7c 	.word	0x08003c7c

08001cd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d11f      	bne.n	8001d32 <DMA_CheckFifoParam+0x5a>
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d856      	bhi.n	8001da6 <DMA_CheckFifoParam+0xce>
 8001cf8:	a201      	add	r2, pc, #4	; (adr r2, 8001d00 <DMA_CheckFifoParam+0x28>)
 8001cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfe:	bf00      	nop
 8001d00:	08001d11 	.word	0x08001d11
 8001d04:	08001d23 	.word	0x08001d23
 8001d08:	08001d11 	.word	0x08001d11
 8001d0c:	08001da7 	.word	0x08001da7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d046      	beq.n	8001daa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d20:	e043      	b.n	8001daa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d2a:	d140      	bne.n	8001dae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d30:	e03d      	b.n	8001dae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d3a:	d121      	bne.n	8001d80 <DMA_CheckFifoParam+0xa8>
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d837      	bhi.n	8001db2 <DMA_CheckFifoParam+0xda>
 8001d42:	a201      	add	r2, pc, #4	; (adr r2, 8001d48 <DMA_CheckFifoParam+0x70>)
 8001d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d48:	08001d59 	.word	0x08001d59
 8001d4c:	08001d5f 	.word	0x08001d5f
 8001d50:	08001d59 	.word	0x08001d59
 8001d54:	08001d71 	.word	0x08001d71
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d5c:	e030      	b.n	8001dc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d025      	beq.n	8001db6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d6e:	e022      	b.n	8001db6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d78:	d11f      	bne.n	8001dba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d7e:	e01c      	b.n	8001dba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d903      	bls.n	8001d8e <DMA_CheckFifoParam+0xb6>
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d003      	beq.n	8001d94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d8c:	e018      	b.n	8001dc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	73fb      	strb	r3, [r7, #15]
      break;
 8001d92:	e015      	b.n	8001dc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00e      	beq.n	8001dbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
      break;
 8001da4:	e00b      	b.n	8001dbe <DMA_CheckFifoParam+0xe6>
      break;
 8001da6:	bf00      	nop
 8001da8:	e00a      	b.n	8001dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001daa:	bf00      	nop
 8001dac:	e008      	b.n	8001dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dae:	bf00      	nop
 8001db0:	e006      	b.n	8001dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001db2:	bf00      	nop
 8001db4:	e004      	b.n	8001dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001db6:	bf00      	nop
 8001db8:	e002      	b.n	8001dc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001dba:	bf00      	nop
 8001dbc:	e000      	b.n	8001dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dbe:	bf00      	nop
    }
  } 
  
  return status; 
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop

08001dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	e159      	b.n	80020a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dec:	2201      	movs	r2, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	f040 8148 	bne.w	800209a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d005      	beq.n	8001e22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d130      	bne.n	8001e84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e58:	2201      	movs	r2, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	f003 0201 	and.w	r2, r3, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d017      	beq.n	8001ec0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d123      	bne.n	8001f14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	08da      	lsrs	r2, r3, #3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3208      	adds	r2, #8
 8001ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	08da      	lsrs	r2, r3, #3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3208      	adds	r2, #8
 8001f0e:	69b9      	ldr	r1, [r7, #24]
 8001f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2203      	movs	r2, #3
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0203 	and.w	r2, r3, #3
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80a2 	beq.w	800209a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	4b57      	ldr	r3, [pc, #348]	; (80020b8 <HAL_GPIO_Init+0x2e8>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	4a56      	ldr	r2, [pc, #344]	; (80020b8 <HAL_GPIO_Init+0x2e8>)
 8001f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f64:	6453      	str	r3, [r2, #68]	; 0x44
 8001f66:	4b54      	ldr	r3, [pc, #336]	; (80020b8 <HAL_GPIO_Init+0x2e8>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f72:	4a52      	ldr	r2, [pc, #328]	; (80020bc <HAL_GPIO_Init+0x2ec>)
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	089b      	lsrs	r3, r3, #2
 8001f78:	3302      	adds	r3, #2
 8001f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	220f      	movs	r2, #15
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a49      	ldr	r2, [pc, #292]	; (80020c0 <HAL_GPIO_Init+0x2f0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d019      	beq.n	8001fd2 <HAL_GPIO_Init+0x202>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a48      	ldr	r2, [pc, #288]	; (80020c4 <HAL_GPIO_Init+0x2f4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d013      	beq.n	8001fce <HAL_GPIO_Init+0x1fe>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a47      	ldr	r2, [pc, #284]	; (80020c8 <HAL_GPIO_Init+0x2f8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00d      	beq.n	8001fca <HAL_GPIO_Init+0x1fa>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a46      	ldr	r2, [pc, #280]	; (80020cc <HAL_GPIO_Init+0x2fc>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d007      	beq.n	8001fc6 <HAL_GPIO_Init+0x1f6>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a45      	ldr	r2, [pc, #276]	; (80020d0 <HAL_GPIO_Init+0x300>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d101      	bne.n	8001fc2 <HAL_GPIO_Init+0x1f2>
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	e008      	b.n	8001fd4 <HAL_GPIO_Init+0x204>
 8001fc2:	2307      	movs	r3, #7
 8001fc4:	e006      	b.n	8001fd4 <HAL_GPIO_Init+0x204>
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e004      	b.n	8001fd4 <HAL_GPIO_Init+0x204>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e002      	b.n	8001fd4 <HAL_GPIO_Init+0x204>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <HAL_GPIO_Init+0x204>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	69fa      	ldr	r2, [r7, #28]
 8001fd6:	f002 0203 	and.w	r2, r2, #3
 8001fda:	0092      	lsls	r2, r2, #2
 8001fdc:	4093      	lsls	r3, r2
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fe4:	4935      	ldr	r1, [pc, #212]	; (80020bc <HAL_GPIO_Init+0x2ec>)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	089b      	lsrs	r3, r3, #2
 8001fea:	3302      	adds	r3, #2
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff2:	4b38      	ldr	r3, [pc, #224]	; (80020d4 <HAL_GPIO_Init+0x304>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002016:	4a2f      	ldr	r2, [pc, #188]	; (80020d4 <HAL_GPIO_Init+0x304>)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800201c:	4b2d      	ldr	r3, [pc, #180]	; (80020d4 <HAL_GPIO_Init+0x304>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002040:	4a24      	ldr	r2, [pc, #144]	; (80020d4 <HAL_GPIO_Init+0x304>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002046:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <HAL_GPIO_Init+0x304>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800206a:	4a1a      	ldr	r2, [pc, #104]	; (80020d4 <HAL_GPIO_Init+0x304>)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002070:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <HAL_GPIO_Init+0x304>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002094:	4a0f      	ldr	r2, [pc, #60]	; (80020d4 <HAL_GPIO_Init+0x304>)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3301      	adds	r3, #1
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	2b0f      	cmp	r3, #15
 80020a4:	f67f aea2 	bls.w	8001dec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3724      	adds	r7, #36	; 0x24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40013800 	.word	0x40013800
 80020c0:	40020000 	.word	0x40020000
 80020c4:	40020400 	.word	0x40020400
 80020c8:	40020800 	.word	0x40020800
 80020cc:	40020c00 	.word	0x40020c00
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40013c00 	.word	0x40013c00

080020d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
 80020e4:	4613      	mov	r3, r2
 80020e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e8:	787b      	ldrb	r3, [r7, #1]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ee:	887a      	ldrh	r2, [r7, #2]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020f4:	e003      	b.n	80020fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020f6:	887b      	ldrh	r3, [r7, #2]
 80020f8:	041a      	lsls	r2, r3, #16
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	619a      	str	r2, [r3, #24]
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
	...

0800210c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e264      	b.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d075      	beq.n	8002216 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800212a:	4ba3      	ldr	r3, [pc, #652]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b04      	cmp	r3, #4
 8002134:	d00c      	beq.n	8002150 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002136:	4ba0      	ldr	r3, [pc, #640]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800213e:	2b08      	cmp	r3, #8
 8002140:	d112      	bne.n	8002168 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002142:	4b9d      	ldr	r3, [pc, #628]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800214e:	d10b      	bne.n	8002168 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002150:	4b99      	ldr	r3, [pc, #612]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d05b      	beq.n	8002214 <HAL_RCC_OscConfig+0x108>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d157      	bne.n	8002214 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e23f      	b.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002170:	d106      	bne.n	8002180 <HAL_RCC_OscConfig+0x74>
 8002172:	4b91      	ldr	r3, [pc, #580]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a90      	ldr	r2, [pc, #576]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	e01d      	b.n	80021bc <HAL_RCC_OscConfig+0xb0>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x98>
 800218a:	4b8b      	ldr	r3, [pc, #556]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a8a      	ldr	r2, [pc, #552]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4b88      	ldr	r3, [pc, #544]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a87      	ldr	r2, [pc, #540]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 800219c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e00b      	b.n	80021bc <HAL_RCC_OscConfig+0xb0>
 80021a4:	4b84      	ldr	r3, [pc, #528]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a83      	ldr	r2, [pc, #524]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 80021aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	4b81      	ldr	r3, [pc, #516]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a80      	ldr	r2, [pc, #512]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 80021b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d013      	beq.n	80021ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff f8e4 	bl	8001390 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021cc:	f7ff f8e0 	bl	8001390 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	; 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e204      	b.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021de:	4b76      	ldr	r3, [pc, #472]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0xc0>
 80021ea:	e014      	b.n	8002216 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7ff f8d0 	bl	8001390 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f4:	f7ff f8cc 	bl	8001390 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b64      	cmp	r3, #100	; 0x64
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e1f0      	b.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002206:	4b6c      	ldr	r3, [pc, #432]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0xe8>
 8002212:	e000      	b.n	8002216 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d063      	beq.n	80022ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002222:	4b65      	ldr	r3, [pc, #404]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222e:	4b62      	ldr	r3, [pc, #392]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002236:	2b08      	cmp	r3, #8
 8002238:	d11c      	bne.n	8002274 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800223a:	4b5f      	ldr	r3, [pc, #380]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d116      	bne.n	8002274 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002246:	4b5c      	ldr	r3, [pc, #368]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <HAL_RCC_OscConfig+0x152>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d001      	beq.n	800225e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e1c4      	b.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225e:	4b56      	ldr	r3, [pc, #344]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4952      	ldr	r1, [pc, #328]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002272:	e03a      	b.n	80022ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d020      	beq.n	80022be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800227c:	4b4f      	ldr	r3, [pc, #316]	; (80023bc <HAL_RCC_OscConfig+0x2b0>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002282:	f7ff f885 	bl	8001390 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800228a:	f7ff f881 	bl	8001390 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e1a5      	b.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229c:	4b46      	ldr	r3, [pc, #280]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a8:	4b43      	ldr	r3, [pc, #268]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4940      	ldr	r1, [pc, #256]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	600b      	str	r3, [r1, #0]
 80022bc:	e015      	b.n	80022ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022be:	4b3f      	ldr	r3, [pc, #252]	; (80023bc <HAL_RCC_OscConfig+0x2b0>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7ff f864 	bl	8001390 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022cc:	f7ff f860 	bl	8001390 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e184      	b.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022de:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d030      	beq.n	8002358 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d016      	beq.n	800232c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fe:	4b30      	ldr	r3, [pc, #192]	; (80023c0 <HAL_RCC_OscConfig+0x2b4>)
 8002300:	2201      	movs	r2, #1
 8002302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002304:	f7ff f844 	bl	8001390 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800230c:	f7ff f840 	bl	8001390 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e164      	b.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0x200>
 800232a:	e015      	b.n	8002358 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800232c:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <HAL_RCC_OscConfig+0x2b4>)
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002332:	f7ff f82d 	bl	8001390 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800233a:	f7ff f829 	bl	8001390 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e14d      	b.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234c:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 800234e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1f0      	bne.n	800233a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80a0 	beq.w	80024a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236a:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10f      	bne.n	8002396 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002384:	6413      	str	r3, [r2, #64]	; 0x40
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002392:	2301      	movs	r3, #1
 8002394:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_RCC_OscConfig+0x2b8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d121      	bne.n	80023e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <HAL_RCC_OscConfig+0x2b8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a07      	ldr	r2, [pc, #28]	; (80023c4 <HAL_RCC_OscConfig+0x2b8>)
 80023a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ae:	f7fe ffef 	bl	8001390 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b4:	e011      	b.n	80023da <HAL_RCC_OscConfig+0x2ce>
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800
 80023bc:	42470000 	.word	0x42470000
 80023c0:	42470e80 	.word	0x42470e80
 80023c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c8:	f7fe ffe2 	bl	8001390 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e106      	b.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023da:	4b85      	ldr	r3, [pc, #532]	; (80025f0 <HAL_RCC_OscConfig+0x4e4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d106      	bne.n	80023fc <HAL_RCC_OscConfig+0x2f0>
 80023ee:	4b81      	ldr	r3, [pc, #516]	; (80025f4 <HAL_RCC_OscConfig+0x4e8>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f2:	4a80      	ldr	r2, [pc, #512]	; (80025f4 <HAL_RCC_OscConfig+0x4e8>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6713      	str	r3, [r2, #112]	; 0x70
 80023fa:	e01c      	b.n	8002436 <HAL_RCC_OscConfig+0x32a>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b05      	cmp	r3, #5
 8002402:	d10c      	bne.n	800241e <HAL_RCC_OscConfig+0x312>
 8002404:	4b7b      	ldr	r3, [pc, #492]	; (80025f4 <HAL_RCC_OscConfig+0x4e8>)
 8002406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002408:	4a7a      	ldr	r2, [pc, #488]	; (80025f4 <HAL_RCC_OscConfig+0x4e8>)
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	6713      	str	r3, [r2, #112]	; 0x70
 8002410:	4b78      	ldr	r3, [pc, #480]	; (80025f4 <HAL_RCC_OscConfig+0x4e8>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	4a77      	ldr	r2, [pc, #476]	; (80025f4 <HAL_RCC_OscConfig+0x4e8>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6713      	str	r3, [r2, #112]	; 0x70
 800241c:	e00b      	b.n	8002436 <HAL_RCC_OscConfig+0x32a>
 800241e:	4b75      	ldr	r3, [pc, #468]	; (80025f4 <HAL_RCC_OscConfig+0x4e8>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	4a74      	ldr	r2, [pc, #464]	; (80025f4 <HAL_RCC_OscConfig+0x4e8>)
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	6713      	str	r3, [r2, #112]	; 0x70
 800242a:	4b72      	ldr	r3, [pc, #456]	; (80025f4 <HAL_RCC_OscConfig+0x4e8>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	4a71      	ldr	r2, [pc, #452]	; (80025f4 <HAL_RCC_OscConfig+0x4e8>)
 8002430:	f023 0304 	bic.w	r3, r3, #4
 8002434:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d015      	beq.n	800246a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243e:	f7fe ffa7 	bl	8001390 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002444:	e00a      	b.n	800245c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002446:	f7fe ffa3 	bl	8001390 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	f241 3288 	movw	r2, #5000	; 0x1388
 8002454:	4293      	cmp	r3, r2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e0c5      	b.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245c:	4b65      	ldr	r3, [pc, #404]	; (80025f4 <HAL_RCC_OscConfig+0x4e8>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0ee      	beq.n	8002446 <HAL_RCC_OscConfig+0x33a>
 8002468:	e014      	b.n	8002494 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246a:	f7fe ff91 	bl	8001390 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002470:	e00a      	b.n	8002488 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002472:	f7fe ff8d 	bl	8001390 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002480:	4293      	cmp	r3, r2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e0af      	b.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002488:	4b5a      	ldr	r3, [pc, #360]	; (80025f4 <HAL_RCC_OscConfig+0x4e8>)
 800248a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1ee      	bne.n	8002472 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002494:	7dfb      	ldrb	r3, [r7, #23]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d105      	bne.n	80024a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249a:	4b56      	ldr	r3, [pc, #344]	; (80025f4 <HAL_RCC_OscConfig+0x4e8>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a55      	ldr	r2, [pc, #340]	; (80025f4 <HAL_RCC_OscConfig+0x4e8>)
 80024a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 809b 	beq.w	80025e6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024b0:	4b50      	ldr	r3, [pc, #320]	; (80025f4 <HAL_RCC_OscConfig+0x4e8>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d05c      	beq.n	8002576 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d141      	bne.n	8002548 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c4:	4b4c      	ldr	r3, [pc, #304]	; (80025f8 <HAL_RCC_OscConfig+0x4ec>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7fe ff61 	bl	8001390 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d2:	f7fe ff5d 	bl	8001390 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e081      	b.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e4:	4b43      	ldr	r3, [pc, #268]	; (80025f4 <HAL_RCC_OscConfig+0x4e8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69da      	ldr	r2, [r3, #28]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	019b      	lsls	r3, r3, #6
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002506:	085b      	lsrs	r3, r3, #1
 8002508:	3b01      	subs	r3, #1
 800250a:	041b      	lsls	r3, r3, #16
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	061b      	lsls	r3, r3, #24
 8002514:	4937      	ldr	r1, [pc, #220]	; (80025f4 <HAL_RCC_OscConfig+0x4e8>)
 8002516:	4313      	orrs	r3, r2
 8002518:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800251a:	4b37      	ldr	r3, [pc, #220]	; (80025f8 <HAL_RCC_OscConfig+0x4ec>)
 800251c:	2201      	movs	r2, #1
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7fe ff36 	bl	8001390 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002528:	f7fe ff32 	bl	8001390 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e056      	b.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253a:	4b2e      	ldr	r3, [pc, #184]	; (80025f4 <HAL_RCC_OscConfig+0x4e8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x41c>
 8002546:	e04e      	b.n	80025e6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002548:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <HAL_RCC_OscConfig+0x4ec>)
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7fe ff1f 	bl	8001390 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002556:	f7fe ff1b 	bl	8001390 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e03f      	b.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002568:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <HAL_RCC_OscConfig+0x4e8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f0      	bne.n	8002556 <HAL_RCC_OscConfig+0x44a>
 8002574:	e037      	b.n	80025e6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e032      	b.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002582:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <HAL_RCC_OscConfig+0x4e8>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d028      	beq.n	80025e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d121      	bne.n	80025e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d11a      	bne.n	80025e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025b2:	4013      	ands	r3, r2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d111      	bne.n	80025e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	085b      	lsrs	r3, r3, #1
 80025ca:	3b01      	subs	r3, #1
 80025cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40007000 	.word	0x40007000
 80025f4:	40023800 	.word	0x40023800
 80025f8:	42470060 	.word	0x42470060

080025fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0cc      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002610:	4b68      	ldr	r3, [pc, #416]	; (80027b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d90c      	bls.n	8002638 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b63      	ldr	r3, [pc, #396]	; (80027b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0b8      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d020      	beq.n	8002686 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002650:	4b59      	ldr	r3, [pc, #356]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	4a58      	ldr	r2, [pc, #352]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800265a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002668:	4b53      	ldr	r3, [pc, #332]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4a52      	ldr	r2, [pc, #328]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002672:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002674:	4b50      	ldr	r3, [pc, #320]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	494d      	ldr	r1, [pc, #308]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	4313      	orrs	r3, r2
 8002684:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d044      	beq.n	800271c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d107      	bne.n	80026aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269a:	4b47      	ldr	r3, [pc, #284]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d119      	bne.n	80026da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e07f      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d003      	beq.n	80026ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d107      	bne.n	80026ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ba:	4b3f      	ldr	r3, [pc, #252]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e06f      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ca:	4b3b      	ldr	r3, [pc, #236]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e067      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026da:	4b37      	ldr	r3, [pc, #220]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f023 0203 	bic.w	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	4934      	ldr	r1, [pc, #208]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026ec:	f7fe fe50 	bl	8001390 <HAL_GetTick>
 80026f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f2:	e00a      	b.n	800270a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f4:	f7fe fe4c 	bl	8001390 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e04f      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270a:	4b2b      	ldr	r3, [pc, #172]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 020c 	and.w	r2, r3, #12
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	429a      	cmp	r2, r3
 800271a:	d1eb      	bne.n	80026f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800271c:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <HAL_RCC_ClockConfig+0x1b8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d20c      	bcs.n	8002744 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <HAL_RCC_ClockConfig+0x1b8>)
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e032      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002750:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	4916      	ldr	r1, [pc, #88]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	4313      	orrs	r3, r2
 8002760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d009      	beq.n	8002782 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800276e:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	490e      	ldr	r1, [pc, #56]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	4313      	orrs	r3, r2
 8002780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002782:	f000 f821 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8002786:	4602      	mov	r2, r0
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	490a      	ldr	r1, [pc, #40]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	5ccb      	ldrb	r3, [r1, r3]
 8002796:	fa22 f303 	lsr.w	r3, r2, r3
 800279a:	4a09      	ldr	r2, [pc, #36]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <HAL_RCC_ClockConfig+0x1c8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe fdb0 	bl	8001308 <HAL_InitTick>

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40023c00 	.word	0x40023c00
 80027b8:	40023800 	.word	0x40023800
 80027bc:	08003c64 	.word	0x08003c64
 80027c0:	20000000 	.word	0x20000000
 80027c4:	20000004 	.word	0x20000004

080027c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	2300      	movs	r3, #0
 80027da:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027e0:	4b67      	ldr	r3, [pc, #412]	; (8002980 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 030c 	and.w	r3, r3, #12
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d00d      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0x40>
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	f200 80bd 	bhi.w	800296c <HAL_RCC_GetSysClockFreq+0x1a4>
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x34>
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d003      	beq.n	8002802 <HAL_RCC_GetSysClockFreq+0x3a>
 80027fa:	e0b7      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027fc:	4b61      	ldr	r3, [pc, #388]	; (8002984 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80027fe:	60bb      	str	r3, [r7, #8]
       break;
 8002800:	e0b7      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002802:	4b61      	ldr	r3, [pc, #388]	; (8002988 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002804:	60bb      	str	r3, [r7, #8]
      break;
 8002806:	e0b4      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002808:	4b5d      	ldr	r3, [pc, #372]	; (8002980 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002810:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002812:	4b5b      	ldr	r3, [pc, #364]	; (8002980 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d04d      	beq.n	80028ba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800281e:	4b58      	ldr	r3, [pc, #352]	; (8002980 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	099b      	lsrs	r3, r3, #6
 8002824:	461a      	mov	r2, r3
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800282e:	f04f 0100 	mov.w	r1, #0
 8002832:	ea02 0800 	and.w	r8, r2, r0
 8002836:	ea03 0901 	and.w	r9, r3, r1
 800283a:	4640      	mov	r0, r8
 800283c:	4649      	mov	r1, r9
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	014b      	lsls	r3, r1, #5
 8002848:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800284c:	0142      	lsls	r2, r0, #5
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	ebb0 0008 	subs.w	r0, r0, r8
 8002856:	eb61 0109 	sbc.w	r1, r1, r9
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	018b      	lsls	r3, r1, #6
 8002864:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002868:	0182      	lsls	r2, r0, #6
 800286a:	1a12      	subs	r2, r2, r0
 800286c:	eb63 0301 	sbc.w	r3, r3, r1
 8002870:	f04f 0000 	mov.w	r0, #0
 8002874:	f04f 0100 	mov.w	r1, #0
 8002878:	00d9      	lsls	r1, r3, #3
 800287a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800287e:	00d0      	lsls	r0, r2, #3
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	eb12 0208 	adds.w	r2, r2, r8
 8002888:	eb43 0309 	adc.w	r3, r3, r9
 800288c:	f04f 0000 	mov.w	r0, #0
 8002890:	f04f 0100 	mov.w	r1, #0
 8002894:	0259      	lsls	r1, r3, #9
 8002896:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800289a:	0250      	lsls	r0, r2, #9
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	461a      	mov	r2, r3
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	f7fd fc94 	bl	80001d8 <__aeabi_uldivmod>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4613      	mov	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	e04a      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ba:	4b31      	ldr	r3, [pc, #196]	; (8002980 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	099b      	lsrs	r3, r3, #6
 80028c0:	461a      	mov	r2, r3
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028ca:	f04f 0100 	mov.w	r1, #0
 80028ce:	ea02 0400 	and.w	r4, r2, r0
 80028d2:	ea03 0501 	and.w	r5, r3, r1
 80028d6:	4620      	mov	r0, r4
 80028d8:	4629      	mov	r1, r5
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	014b      	lsls	r3, r1, #5
 80028e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028e8:	0142      	lsls	r2, r0, #5
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	1b00      	subs	r0, r0, r4
 80028f0:	eb61 0105 	sbc.w	r1, r1, r5
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	018b      	lsls	r3, r1, #6
 80028fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002902:	0182      	lsls	r2, r0, #6
 8002904:	1a12      	subs	r2, r2, r0
 8002906:	eb63 0301 	sbc.w	r3, r3, r1
 800290a:	f04f 0000 	mov.w	r0, #0
 800290e:	f04f 0100 	mov.w	r1, #0
 8002912:	00d9      	lsls	r1, r3, #3
 8002914:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002918:	00d0      	lsls	r0, r2, #3
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	1912      	adds	r2, r2, r4
 8002920:	eb45 0303 	adc.w	r3, r5, r3
 8002924:	f04f 0000 	mov.w	r0, #0
 8002928:	f04f 0100 	mov.w	r1, #0
 800292c:	0299      	lsls	r1, r3, #10
 800292e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002932:	0290      	lsls	r0, r2, #10
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4610      	mov	r0, r2
 800293a:	4619      	mov	r1, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	461a      	mov	r2, r3
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	f7fd fc48 	bl	80001d8 <__aeabi_uldivmod>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4613      	mov	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	0c1b      	lsrs	r3, r3, #16
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	3301      	adds	r3, #1
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	60bb      	str	r3, [r7, #8]
      break;
 800296a:	e002      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800296e:	60bb      	str	r3, [r7, #8]
      break;
 8002970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002972:	68bb      	ldr	r3, [r7, #8]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800
 8002984:	00f42400 	.word	0x00f42400
 8002988:	007a1200 	.word	0x007a1200

0800298c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002992:	681b      	ldr	r3, [r3, #0]
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000000 	.word	0x20000000

080029a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029a8:	f7ff fff0 	bl	800298c <HAL_RCC_GetHCLKFreq>
 80029ac:	4602      	mov	r2, r0
 80029ae:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	0a9b      	lsrs	r3, r3, #10
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	4903      	ldr	r1, [pc, #12]	; (80029c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ba:	5ccb      	ldrb	r3, [r1, r3]
 80029bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40023800 	.word	0x40023800
 80029c8:	08003c74 	.word	0x08003c74

080029cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029d0:	f7ff ffdc 	bl	800298c <HAL_RCC_GetHCLKFreq>
 80029d4:	4602      	mov	r2, r0
 80029d6:	4b05      	ldr	r3, [pc, #20]	; (80029ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	0b5b      	lsrs	r3, r3, #13
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	4903      	ldr	r1, [pc, #12]	; (80029f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029e2:	5ccb      	ldrb	r3, [r1, r3]
 80029e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40023800 	.word	0x40023800
 80029f0:	08003c74 	.word	0x08003c74

080029f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e03f      	b.n	8002a86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7fe fae2 	bl	8000fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2224      	movs	r2, #36	; 0x24
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fd51 	bl	80034e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695a      	ldr	r2, [r3, #20]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d153      	bne.n	8002b52 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <HAL_UART_Transmit_DMA+0x26>
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e04c      	b.n	8002b54 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_UART_Transmit_DMA+0x38>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e045      	b.n	8002b54 <HAL_UART_Transmit_DMA+0xc4>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	88fa      	ldrh	r2, [r7, #6]
 8002ada:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	88fa      	ldrh	r2, [r7, #6]
 8002ae0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2221      	movs	r2, #33	; 0x21
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af4:	4a19      	ldr	r2, [pc, #100]	; (8002b5c <HAL_UART_Transmit_DMA+0xcc>)
 8002af6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afc:	4a18      	ldr	r2, [pc, #96]	; (8002b60 <HAL_UART_Transmit_DMA+0xd0>)
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b04:	4a17      	ldr	r2, [pc, #92]	; (8002b64 <HAL_UART_Transmit_DMA+0xd4>)
 8002b06:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8002b10:	f107 0308 	add.w	r3, r7, #8
 8002b14:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	6819      	ldr	r1, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3304      	adds	r3, #4
 8002b24:	461a      	mov	r2, r3
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	f7fe fdfe 	bl	8001728 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b34:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b4c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e000      	b.n	8002b54 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002b52:	2302      	movs	r3, #2
  }
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	08002f9d 	.word	0x08002f9d
 8002b60:	08002fef 	.word	0x08002fef
 8002b64:	080030d7 	.word	0x080030d7

08002b68 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	4613      	mov	r3, r2
 8002b74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d11d      	bne.n	8002bbe <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <HAL_UART_Receive_DMA+0x26>
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e016      	b.n	8002bc0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_UART_Receive_DMA+0x38>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e00f      	b.n	8002bc0 <HAL_UART_Receive_DMA+0x58>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	68b9      	ldr	r1, [r7, #8]
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 fad9 	bl	800316c <UART_Start_Receive_DMA>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	e000      	b.n	8002bc0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002bbe:	2302      	movs	r3, #2
  }
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	; 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10d      	bne.n	8002c1a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_UART_IRQHandler+0x52>
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fbcd 	bl	80033b2 <UART_Receive_IT>
      return;
 8002c18:	e17c      	b.n	8002f14 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80b1 	beq.w	8002d84 <HAL_UART_IRQHandler+0x1bc>
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d105      	bne.n	8002c38 <HAL_UART_IRQHandler+0x70>
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 80a6 	beq.w	8002d84 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <HAL_UART_IRQHandler+0x90>
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	f043 0201 	orr.w	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_UART_IRQHandler+0xb0>
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	f043 0202 	orr.w	r2, r3, #2
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <HAL_UART_IRQHandler+0xd0>
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	f043 0204 	orr.w	r2, r3, #4
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00f      	beq.n	8002cc2 <HAL_UART_IRQHandler+0xfa>
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d104      	bne.n	8002cb6 <HAL_UART_IRQHandler+0xee>
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d005      	beq.n	8002cc2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f043 0208 	orr.w	r2, r3, #8
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 811f 	beq.w	8002f0a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x11e>
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fb66 	bl	80033b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b40      	cmp	r3, #64	; 0x40
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d102      	bne.n	8002d0e <HAL_UART_IRQHandler+0x146>
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d031      	beq.n	8002d72 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 faa6 	bl	8003260 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1e:	2b40      	cmp	r3, #64	; 0x40
 8002d20:	d123      	bne.n	8002d6a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d30:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d013      	beq.n	8002d62 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	4a77      	ldr	r2, [pc, #476]	; (8002f1c <HAL_UART_IRQHandler+0x354>)
 8002d40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe fdb6 	bl	80018b8 <HAL_DMA_Abort_IT>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d016      	beq.n	8002d80 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d60:	e00e      	b.n	8002d80 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f904 	bl	8002f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d68:	e00a      	b.n	8002d80 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f900 	bl	8002f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d70:	e006      	b.n	8002d80 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f8fc 	bl	8002f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d7e:	e0c4      	b.n	8002f0a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d80:	bf00      	nop
    return;
 8002d82:	e0c2      	b.n	8002f0a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	f040 80a2 	bne.w	8002ed2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 809c 	beq.w	8002ed2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8096 	beq.w	8002ed2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc6:	2b40      	cmp	r3, #64	; 0x40
 8002dc8:	d14f      	bne.n	8002e6a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002dd4:	8a3b      	ldrh	r3, [r7, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 8099 	beq.w	8002f0e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002de0:	8a3a      	ldrh	r2, [r7, #16]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	f080 8093 	bcs.w	8002f0e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	8a3a      	ldrh	r2, [r7, #16]
 8002dec:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df8:	d02b      	beq.n	8002e52 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e08:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0201 	bic.w	r2, r2, #1
 8002e18:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e28:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0210 	bic.w	r2, r2, #16
 8002e46:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fe fcc3 	bl	80017d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	4619      	mov	r1, r3
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f88e 	bl	8002f84 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e68:	e051      	b.n	8002f0e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d047      	beq.n	8002f12 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8002e82:	8a7b      	ldrh	r3, [r7, #18]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d044      	beq.n	8002f12 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e96:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0201 	bic.w	r2, r2, #1
 8002ea6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0210 	bic.w	r2, r2, #16
 8002ec4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ec6:	8a7b      	ldrh	r3, [r7, #18]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f85a 	bl	8002f84 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002ed0:	e01f      	b.n	8002f12 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_UART_IRQHandler+0x326>
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f9fb 	bl	80032e2 <UART_Transmit_IT>
    return;
 8002eec:	e012      	b.n	8002f14 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00d      	beq.n	8002f14 <HAL_UART_IRQHandler+0x34c>
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d008      	beq.n	8002f14 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fa3d 	bl	8003382 <UART_EndTransmit_IT>
    return;
 8002f08:	e004      	b.n	8002f14 <HAL_UART_IRQHandler+0x34c>
    return;
 8002f0a:	bf00      	nop
 8002f0c:	e002      	b.n	8002f14 <HAL_UART_IRQHandler+0x34c>
      return;
 8002f0e:	bf00      	nop
 8002f10:	e000      	b.n	8002f14 <HAL_UART_IRQHandler+0x34c>
      return;
 8002f12:	bf00      	nop
  }
}
 8002f14:	3728      	adds	r7, #40	; 0x28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	080032bb 	.word	0x080032bb

08002f20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d113      	bne.n	8002fe0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fcc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fdc:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002fde:	e002      	b.n	8002fe6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f7ff ff9d 	bl	8002f20 <HAL_UART_TxCpltCallback>
}
 8002fe6:	bf00      	nop
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f7ff ff99 	bl	8002f34 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003002:	bf00      	nop
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003016:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d12a      	bne.n	800307c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800303a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695a      	ldr	r2, [r3, #20]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0201 	bic.w	r2, r2, #1
 800304a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800305a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	2b01      	cmp	r3, #1
 800306a:	d107      	bne.n	800307c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0210 	bic.w	r2, r2, #16
 800307a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	2b01      	cmp	r3, #1
 8003082:	d106      	bne.n	8003092 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003088:	4619      	mov	r1, r3
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f7ff ff7a 	bl	8002f84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003090:	e002      	b.n	8003098 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f7ff ff58 	bl	8002f48 <HAL_UART_RxCpltCallback>
}
 8003098:	bf00      	nop
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d108      	bne.n	80030c8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	b29b      	uxth	r3, r3
 80030be:	4619      	mov	r1, r3
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f7ff ff5f 	bl	8002f84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80030c6:	e002      	b.n	80030ce <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f7ff ff47 	bl	8002f5c <HAL_UART_RxHalfCpltCallback>
}
 80030ce:	bf00      	nop
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f2:	2b80      	cmp	r3, #128	; 0x80
 80030f4:	bf0c      	ite	eq
 80030f6:	2301      	moveq	r3, #1
 80030f8:	2300      	movne	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b21      	cmp	r3, #33	; 0x21
 8003108:	d108      	bne.n	800311c <UART_DMAError+0x46>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2200      	movs	r2, #0
 8003114:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003116:	68b8      	ldr	r0, [r7, #8]
 8003118:	f000 f88c 	bl	8003234 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003126:	2b40      	cmp	r3, #64	; 0x40
 8003128:	bf0c      	ite	eq
 800312a:	2301      	moveq	r3, #1
 800312c:	2300      	movne	r3, #0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b22      	cmp	r3, #34	; 0x22
 800313c:	d108      	bne.n	8003150 <UART_DMAError+0x7a>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2200      	movs	r2, #0
 8003148:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800314a:	68b8      	ldr	r0, [r7, #8]
 800314c:	f000 f888 	bl	8003260 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f043 0210 	orr.w	r2, r3, #16
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800315c:	68b8      	ldr	r0, [r7, #8]
 800315e:	f7ff ff07 	bl	8002f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	4613      	mov	r3, r2
 8003178:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	88fa      	ldrh	r2, [r7, #6]
 8003184:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2222      	movs	r2, #34	; 0x22
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003198:	4a23      	ldr	r2, [pc, #140]	; (8003228 <UART_Start_Receive_DMA+0xbc>)
 800319a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a0:	4a22      	ldr	r2, [pc, #136]	; (800322c <UART_Start_Receive_DMA+0xc0>)
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	4a21      	ldr	r2, [pc, #132]	; (8003230 <UART_Start_Receive_DMA+0xc4>)
 80031aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	2200      	movs	r2, #0
 80031b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80031b4:	f107 0308 	add.w	r3, r7, #8
 80031b8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3304      	adds	r3, #4
 80031c4:	4619      	mov	r1, r3
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	f7fe faac 	bl	8001728 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80031d0:	2300      	movs	r3, #0
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031fc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0201 	orr.w	r2, r2, #1
 800320c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800321c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	0800300b 	.word	0x0800300b
 800322c:	080030a1 	.word	0x080030a1
 8003230:	080030d7 	.word	0x080030d7

08003234 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800324a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003276:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695a      	ldr	r2, [r3, #20]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0201 	bic.w	r2, r2, #1
 8003286:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	2b01      	cmp	r3, #1
 800328e:	d107      	bne.n	80032a0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0210 	bic.w	r2, r2, #16
 800329e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f7ff fe4b 	bl	8002f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b085      	sub	sp, #20
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b21      	cmp	r3, #33	; 0x21
 80032f4:	d13e      	bne.n	8003374 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032fe:	d114      	bne.n	800332a <UART_Transmit_IT+0x48>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d110      	bne.n	800332a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800331c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	1c9a      	adds	r2, r3, #2
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	621a      	str	r2, [r3, #32]
 8003328:	e008      	b.n	800333c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	1c59      	adds	r1, r3, #1
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6211      	str	r1, [r2, #32]
 8003334:	781a      	ldrb	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003340:	b29b      	uxth	r3, r3
 8003342:	3b01      	subs	r3, #1
 8003344:	b29b      	uxth	r3, r3
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	4619      	mov	r1, r3
 800334a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10f      	bne.n	8003370 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800335e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800336e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	e000      	b.n	8003376 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003374:	2302      	movs	r3, #2
  }
}
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003398:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff fdbc 	bl	8002f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b22      	cmp	r3, #34	; 0x22
 80033c4:	f040 8087 	bne.w	80034d6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d0:	d117      	bne.n	8003402 <UART_Receive_IT+0x50>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d113      	bne.n	8003402 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	1c9a      	adds	r2, r3, #2
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003400:	e026      	b.n	8003450 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003408:	2300      	movs	r3, #0
 800340a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003414:	d007      	beq.n	8003426 <UART_Receive_IT+0x74>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10a      	bne.n	8003434 <UART_Receive_IT+0x82>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	e008      	b.n	8003446 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003440:	b2da      	uxtb	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b29b      	uxth	r3, r3
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	4619      	mov	r1, r3
 800345e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003460:	2b00      	cmp	r3, #0
 8003462:	d136      	bne.n	80034d2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0220 	bic.w	r2, r2, #32
 8003472:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003482:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0201 	bic.w	r2, r2, #1
 8003492:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d10e      	bne.n	80034c2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0210 	bic.w	r2, r2, #16
 80034b2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034b8:	4619      	mov	r1, r3
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff fd62 	bl	8002f84 <HAL_UARTEx_RxEventCallback>
 80034c0:	e002      	b.n	80034c8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff fd40 	bl	8002f48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	e002      	b.n	80034d8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	e000      	b.n	80034d8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80034d6:	2302      	movs	r3, #2
  }
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034e4:	b09f      	sub	sp, #124	; 0x7c
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f6:	68d9      	ldr	r1, [r3, #12]
 80034f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	ea40 0301 	orr.w	r3, r0, r1
 8003500:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	431a      	orrs	r2, r3
 800350c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	431a      	orrs	r2, r3
 8003512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	4313      	orrs	r3, r2
 8003518:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800351a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003524:	f021 010c 	bic.w	r1, r1, #12
 8003528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800352e:	430b      	orrs	r3, r1
 8003530:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800353c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353e:	6999      	ldr	r1, [r3, #24]
 8003540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	ea40 0301 	orr.w	r3, r0, r1
 8003548:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800354a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4bc5      	ldr	r3, [pc, #788]	; (8003864 <UART_SetConfig+0x384>)
 8003550:	429a      	cmp	r2, r3
 8003552:	d004      	beq.n	800355e <UART_SetConfig+0x7e>
 8003554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	4bc3      	ldr	r3, [pc, #780]	; (8003868 <UART_SetConfig+0x388>)
 800355a:	429a      	cmp	r2, r3
 800355c:	d103      	bne.n	8003566 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800355e:	f7ff fa35 	bl	80029cc <HAL_RCC_GetPCLK2Freq>
 8003562:	6778      	str	r0, [r7, #116]	; 0x74
 8003564:	e002      	b.n	800356c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003566:	f7ff fa1d 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
 800356a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800356c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003574:	f040 80b6 	bne.w	80036e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800357a:	461c      	mov	r4, r3
 800357c:	f04f 0500 	mov.w	r5, #0
 8003580:	4622      	mov	r2, r4
 8003582:	462b      	mov	r3, r5
 8003584:	1891      	adds	r1, r2, r2
 8003586:	6439      	str	r1, [r7, #64]	; 0x40
 8003588:	415b      	adcs	r3, r3
 800358a:	647b      	str	r3, [r7, #68]	; 0x44
 800358c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003590:	1912      	adds	r2, r2, r4
 8003592:	eb45 0303 	adc.w	r3, r5, r3
 8003596:	f04f 0000 	mov.w	r0, #0
 800359a:	f04f 0100 	mov.w	r1, #0
 800359e:	00d9      	lsls	r1, r3, #3
 80035a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035a4:	00d0      	lsls	r0, r2, #3
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	1911      	adds	r1, r2, r4
 80035ac:	6639      	str	r1, [r7, #96]	; 0x60
 80035ae:	416b      	adcs	r3, r5
 80035b0:	667b      	str	r3, [r7, #100]	; 0x64
 80035b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	461a      	mov	r2, r3
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	1891      	adds	r1, r2, r2
 80035be:	63b9      	str	r1, [r7, #56]	; 0x38
 80035c0:	415b      	adcs	r3, r3
 80035c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80035cc:	f7fc fe04 	bl	80001d8 <__aeabi_uldivmod>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4ba5      	ldr	r3, [pc, #660]	; (800386c <UART_SetConfig+0x38c>)
 80035d6:	fba3 2302 	umull	r2, r3, r3, r2
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	011e      	lsls	r6, r3, #4
 80035de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035e0:	461c      	mov	r4, r3
 80035e2:	f04f 0500 	mov.w	r5, #0
 80035e6:	4622      	mov	r2, r4
 80035e8:	462b      	mov	r3, r5
 80035ea:	1891      	adds	r1, r2, r2
 80035ec:	6339      	str	r1, [r7, #48]	; 0x30
 80035ee:	415b      	adcs	r3, r3
 80035f0:	637b      	str	r3, [r7, #52]	; 0x34
 80035f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035f6:	1912      	adds	r2, r2, r4
 80035f8:	eb45 0303 	adc.w	r3, r5, r3
 80035fc:	f04f 0000 	mov.w	r0, #0
 8003600:	f04f 0100 	mov.w	r1, #0
 8003604:	00d9      	lsls	r1, r3, #3
 8003606:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800360a:	00d0      	lsls	r0, r2, #3
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	1911      	adds	r1, r2, r4
 8003612:	65b9      	str	r1, [r7, #88]	; 0x58
 8003614:	416b      	adcs	r3, r5
 8003616:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	461a      	mov	r2, r3
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	1891      	adds	r1, r2, r2
 8003624:	62b9      	str	r1, [r7, #40]	; 0x28
 8003626:	415b      	adcs	r3, r3
 8003628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800362a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800362e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003632:	f7fc fdd1 	bl	80001d8 <__aeabi_uldivmod>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4b8c      	ldr	r3, [pc, #560]	; (800386c <UART_SetConfig+0x38c>)
 800363c:	fba3 1302 	umull	r1, r3, r3, r2
 8003640:	095b      	lsrs	r3, r3, #5
 8003642:	2164      	movs	r1, #100	; 0x64
 8003644:	fb01 f303 	mul.w	r3, r1, r3
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	3332      	adds	r3, #50	; 0x32
 800364e:	4a87      	ldr	r2, [pc, #540]	; (800386c <UART_SetConfig+0x38c>)
 8003650:	fba2 2303 	umull	r2, r3, r2, r3
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800365c:	441e      	add	r6, r3
 800365e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003660:	4618      	mov	r0, r3
 8003662:	f04f 0100 	mov.w	r1, #0
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	1894      	adds	r4, r2, r2
 800366c:	623c      	str	r4, [r7, #32]
 800366e:	415b      	adcs	r3, r3
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
 8003672:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003676:	1812      	adds	r2, r2, r0
 8003678:	eb41 0303 	adc.w	r3, r1, r3
 800367c:	f04f 0400 	mov.w	r4, #0
 8003680:	f04f 0500 	mov.w	r5, #0
 8003684:	00dd      	lsls	r5, r3, #3
 8003686:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800368a:	00d4      	lsls	r4, r2, #3
 800368c:	4622      	mov	r2, r4
 800368e:	462b      	mov	r3, r5
 8003690:	1814      	adds	r4, r2, r0
 8003692:	653c      	str	r4, [r7, #80]	; 0x50
 8003694:	414b      	adcs	r3, r1
 8003696:	657b      	str	r3, [r7, #84]	; 0x54
 8003698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	461a      	mov	r2, r3
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	1891      	adds	r1, r2, r2
 80036a4:	61b9      	str	r1, [r7, #24]
 80036a6:	415b      	adcs	r3, r3
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80036b2:	f7fc fd91 	bl	80001d8 <__aeabi_uldivmod>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4b6c      	ldr	r3, [pc, #432]	; (800386c <UART_SetConfig+0x38c>)
 80036bc:	fba3 1302 	umull	r1, r3, r3, r2
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	2164      	movs	r1, #100	; 0x64
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	3332      	adds	r3, #50	; 0x32
 80036ce:	4a67      	ldr	r2, [pc, #412]	; (800386c <UART_SetConfig+0x38c>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	095b      	lsrs	r3, r3, #5
 80036d6:	f003 0207 	and.w	r2, r3, #7
 80036da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4432      	add	r2, r6
 80036e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036e2:	e0b9      	b.n	8003858 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036e6:	461c      	mov	r4, r3
 80036e8:	f04f 0500 	mov.w	r5, #0
 80036ec:	4622      	mov	r2, r4
 80036ee:	462b      	mov	r3, r5
 80036f0:	1891      	adds	r1, r2, r2
 80036f2:	6139      	str	r1, [r7, #16]
 80036f4:	415b      	adcs	r3, r3
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80036fc:	1912      	adds	r2, r2, r4
 80036fe:	eb45 0303 	adc.w	r3, r5, r3
 8003702:	f04f 0000 	mov.w	r0, #0
 8003706:	f04f 0100 	mov.w	r1, #0
 800370a:	00d9      	lsls	r1, r3, #3
 800370c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003710:	00d0      	lsls	r0, r2, #3
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	eb12 0804 	adds.w	r8, r2, r4
 800371a:	eb43 0905 	adc.w	r9, r3, r5
 800371e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4618      	mov	r0, r3
 8003724:	f04f 0100 	mov.w	r1, #0
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	008b      	lsls	r3, r1, #2
 8003732:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003736:	0082      	lsls	r2, r0, #2
 8003738:	4640      	mov	r0, r8
 800373a:	4649      	mov	r1, r9
 800373c:	f7fc fd4c 	bl	80001d8 <__aeabi_uldivmod>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4b49      	ldr	r3, [pc, #292]	; (800386c <UART_SetConfig+0x38c>)
 8003746:	fba3 2302 	umull	r2, r3, r3, r2
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	011e      	lsls	r6, r3, #4
 800374e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003750:	4618      	mov	r0, r3
 8003752:	f04f 0100 	mov.w	r1, #0
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	1894      	adds	r4, r2, r2
 800375c:	60bc      	str	r4, [r7, #8]
 800375e:	415b      	adcs	r3, r3
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003766:	1812      	adds	r2, r2, r0
 8003768:	eb41 0303 	adc.w	r3, r1, r3
 800376c:	f04f 0400 	mov.w	r4, #0
 8003770:	f04f 0500 	mov.w	r5, #0
 8003774:	00dd      	lsls	r5, r3, #3
 8003776:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800377a:	00d4      	lsls	r4, r2, #3
 800377c:	4622      	mov	r2, r4
 800377e:	462b      	mov	r3, r5
 8003780:	1814      	adds	r4, r2, r0
 8003782:	64bc      	str	r4, [r7, #72]	; 0x48
 8003784:	414b      	adcs	r3, r1
 8003786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	4618      	mov	r0, r3
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	008b      	lsls	r3, r1, #2
 800379c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037a0:	0082      	lsls	r2, r0, #2
 80037a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80037a6:	f7fc fd17 	bl	80001d8 <__aeabi_uldivmod>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4b2f      	ldr	r3, [pc, #188]	; (800386c <UART_SetConfig+0x38c>)
 80037b0:	fba3 1302 	umull	r1, r3, r3, r2
 80037b4:	095b      	lsrs	r3, r3, #5
 80037b6:	2164      	movs	r1, #100	; 0x64
 80037b8:	fb01 f303 	mul.w	r3, r1, r3
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	3332      	adds	r3, #50	; 0x32
 80037c2:	4a2a      	ldr	r2, [pc, #168]	; (800386c <UART_SetConfig+0x38c>)
 80037c4:	fba2 2303 	umull	r2, r3, r2, r3
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ce:	441e      	add	r6, r3
 80037d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037d2:	4618      	mov	r0, r3
 80037d4:	f04f 0100 	mov.w	r1, #0
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	1894      	adds	r4, r2, r2
 80037de:	603c      	str	r4, [r7, #0]
 80037e0:	415b      	adcs	r3, r3
 80037e2:	607b      	str	r3, [r7, #4]
 80037e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037e8:	1812      	adds	r2, r2, r0
 80037ea:	eb41 0303 	adc.w	r3, r1, r3
 80037ee:	f04f 0400 	mov.w	r4, #0
 80037f2:	f04f 0500 	mov.w	r5, #0
 80037f6:	00dd      	lsls	r5, r3, #3
 80037f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037fc:	00d4      	lsls	r4, r2, #3
 80037fe:	4622      	mov	r2, r4
 8003800:	462b      	mov	r3, r5
 8003802:	eb12 0a00 	adds.w	sl, r2, r0
 8003806:	eb43 0b01 	adc.w	fp, r3, r1
 800380a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	4618      	mov	r0, r3
 8003810:	f04f 0100 	mov.w	r1, #0
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	008b      	lsls	r3, r1, #2
 800381e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003822:	0082      	lsls	r2, r0, #2
 8003824:	4650      	mov	r0, sl
 8003826:	4659      	mov	r1, fp
 8003828:	f7fc fcd6 	bl	80001d8 <__aeabi_uldivmod>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	4b0e      	ldr	r3, [pc, #56]	; (800386c <UART_SetConfig+0x38c>)
 8003832:	fba3 1302 	umull	r1, r3, r3, r2
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	2164      	movs	r1, #100	; 0x64
 800383a:	fb01 f303 	mul.w	r3, r1, r3
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	3332      	adds	r3, #50	; 0x32
 8003844:	4a09      	ldr	r2, [pc, #36]	; (800386c <UART_SetConfig+0x38c>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	f003 020f 	and.w	r2, r3, #15
 8003850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4432      	add	r2, r6
 8003856:	609a      	str	r2, [r3, #8]
}
 8003858:	bf00      	nop
 800385a:	377c      	adds	r7, #124	; 0x7c
 800385c:	46bd      	mov	sp, r7
 800385e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003862:	bf00      	nop
 8003864:	40011000 	.word	0x40011000
 8003868:	40011400 	.word	0x40011400
 800386c:	51eb851f 	.word	0x51eb851f

08003870 <calloc>:
 8003870:	4b02      	ldr	r3, [pc, #8]	; (800387c <calloc+0xc>)
 8003872:	460a      	mov	r2, r1
 8003874:	4601      	mov	r1, r0
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	f000 b842 	b.w	8003900 <_calloc_r>
 800387c:	2000000c 	.word	0x2000000c

08003880 <__errno>:
 8003880:	4b01      	ldr	r3, [pc, #4]	; (8003888 <__errno+0x8>)
 8003882:	6818      	ldr	r0, [r3, #0]
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	2000000c 	.word	0x2000000c

0800388c <__libc_init_array>:
 800388c:	b570      	push	{r4, r5, r6, lr}
 800388e:	4d0d      	ldr	r5, [pc, #52]	; (80038c4 <__libc_init_array+0x38>)
 8003890:	4c0d      	ldr	r4, [pc, #52]	; (80038c8 <__libc_init_array+0x3c>)
 8003892:	1b64      	subs	r4, r4, r5
 8003894:	10a4      	asrs	r4, r4, #2
 8003896:	2600      	movs	r6, #0
 8003898:	42a6      	cmp	r6, r4
 800389a:	d109      	bne.n	80038b0 <__libc_init_array+0x24>
 800389c:	4d0b      	ldr	r5, [pc, #44]	; (80038cc <__libc_init_array+0x40>)
 800389e:	4c0c      	ldr	r4, [pc, #48]	; (80038d0 <__libc_init_array+0x44>)
 80038a0:	f000 f8b6 	bl	8003a10 <_init>
 80038a4:	1b64      	subs	r4, r4, r5
 80038a6:	10a4      	asrs	r4, r4, #2
 80038a8:	2600      	movs	r6, #0
 80038aa:	42a6      	cmp	r6, r4
 80038ac:	d105      	bne.n	80038ba <__libc_init_array+0x2e>
 80038ae:	bd70      	pop	{r4, r5, r6, pc}
 80038b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b4:	4798      	blx	r3
 80038b6:	3601      	adds	r6, #1
 80038b8:	e7ee      	b.n	8003898 <__libc_init_array+0xc>
 80038ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80038be:	4798      	blx	r3
 80038c0:	3601      	adds	r6, #1
 80038c2:	e7f2      	b.n	80038aa <__libc_init_array+0x1e>
 80038c4:	08003c8c 	.word	0x08003c8c
 80038c8:	08003c8c 	.word	0x08003c8c
 80038cc:	08003c8c 	.word	0x08003c8c
 80038d0:	08003c90 	.word	0x08003c90

080038d4 <memcpy>:
 80038d4:	440a      	add	r2, r1
 80038d6:	4291      	cmp	r1, r2
 80038d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80038dc:	d100      	bne.n	80038e0 <memcpy+0xc>
 80038de:	4770      	bx	lr
 80038e0:	b510      	push	{r4, lr}
 80038e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038ea:	4291      	cmp	r1, r2
 80038ec:	d1f9      	bne.n	80038e2 <memcpy+0xe>
 80038ee:	bd10      	pop	{r4, pc}

080038f0 <memset>:
 80038f0:	4402      	add	r2, r0
 80038f2:	4603      	mov	r3, r0
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d100      	bne.n	80038fa <memset+0xa>
 80038f8:	4770      	bx	lr
 80038fa:	f803 1b01 	strb.w	r1, [r3], #1
 80038fe:	e7f9      	b.n	80038f4 <memset+0x4>

08003900 <_calloc_r>:
 8003900:	b513      	push	{r0, r1, r4, lr}
 8003902:	434a      	muls	r2, r1
 8003904:	4611      	mov	r1, r2
 8003906:	9201      	str	r2, [sp, #4]
 8003908:	f000 f80a 	bl	8003920 <_malloc_r>
 800390c:	4604      	mov	r4, r0
 800390e:	b118      	cbz	r0, 8003918 <_calloc_r+0x18>
 8003910:	9a01      	ldr	r2, [sp, #4]
 8003912:	2100      	movs	r1, #0
 8003914:	f7ff ffec 	bl	80038f0 <memset>
 8003918:	4620      	mov	r0, r4
 800391a:	b002      	add	sp, #8
 800391c:	bd10      	pop	{r4, pc}
	...

08003920 <_malloc_r>:
 8003920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003922:	1ccd      	adds	r5, r1, #3
 8003924:	f025 0503 	bic.w	r5, r5, #3
 8003928:	3508      	adds	r5, #8
 800392a:	2d0c      	cmp	r5, #12
 800392c:	bf38      	it	cc
 800392e:	250c      	movcc	r5, #12
 8003930:	2d00      	cmp	r5, #0
 8003932:	4606      	mov	r6, r0
 8003934:	db01      	blt.n	800393a <_malloc_r+0x1a>
 8003936:	42a9      	cmp	r1, r5
 8003938:	d903      	bls.n	8003942 <_malloc_r+0x22>
 800393a:	230c      	movs	r3, #12
 800393c:	6033      	str	r3, [r6, #0]
 800393e:	2000      	movs	r0, #0
 8003940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003942:	f000 f857 	bl	80039f4 <__malloc_lock>
 8003946:	4921      	ldr	r1, [pc, #132]	; (80039cc <_malloc_r+0xac>)
 8003948:	680a      	ldr	r2, [r1, #0]
 800394a:	4614      	mov	r4, r2
 800394c:	b99c      	cbnz	r4, 8003976 <_malloc_r+0x56>
 800394e:	4f20      	ldr	r7, [pc, #128]	; (80039d0 <_malloc_r+0xb0>)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	b923      	cbnz	r3, 800395e <_malloc_r+0x3e>
 8003954:	4621      	mov	r1, r4
 8003956:	4630      	mov	r0, r6
 8003958:	f000 f83c 	bl	80039d4 <_sbrk_r>
 800395c:	6038      	str	r0, [r7, #0]
 800395e:	4629      	mov	r1, r5
 8003960:	4630      	mov	r0, r6
 8003962:	f000 f837 	bl	80039d4 <_sbrk_r>
 8003966:	1c43      	adds	r3, r0, #1
 8003968:	d123      	bne.n	80039b2 <_malloc_r+0x92>
 800396a:	230c      	movs	r3, #12
 800396c:	6033      	str	r3, [r6, #0]
 800396e:	4630      	mov	r0, r6
 8003970:	f000 f846 	bl	8003a00 <__malloc_unlock>
 8003974:	e7e3      	b.n	800393e <_malloc_r+0x1e>
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	1b5b      	subs	r3, r3, r5
 800397a:	d417      	bmi.n	80039ac <_malloc_r+0x8c>
 800397c:	2b0b      	cmp	r3, #11
 800397e:	d903      	bls.n	8003988 <_malloc_r+0x68>
 8003980:	6023      	str	r3, [r4, #0]
 8003982:	441c      	add	r4, r3
 8003984:	6025      	str	r5, [r4, #0]
 8003986:	e004      	b.n	8003992 <_malloc_r+0x72>
 8003988:	6863      	ldr	r3, [r4, #4]
 800398a:	42a2      	cmp	r2, r4
 800398c:	bf0c      	ite	eq
 800398e:	600b      	streq	r3, [r1, #0]
 8003990:	6053      	strne	r3, [r2, #4]
 8003992:	4630      	mov	r0, r6
 8003994:	f000 f834 	bl	8003a00 <__malloc_unlock>
 8003998:	f104 000b 	add.w	r0, r4, #11
 800399c:	1d23      	adds	r3, r4, #4
 800399e:	f020 0007 	bic.w	r0, r0, #7
 80039a2:	1ac2      	subs	r2, r0, r3
 80039a4:	d0cc      	beq.n	8003940 <_malloc_r+0x20>
 80039a6:	1a1b      	subs	r3, r3, r0
 80039a8:	50a3      	str	r3, [r4, r2]
 80039aa:	e7c9      	b.n	8003940 <_malloc_r+0x20>
 80039ac:	4622      	mov	r2, r4
 80039ae:	6864      	ldr	r4, [r4, #4]
 80039b0:	e7cc      	b.n	800394c <_malloc_r+0x2c>
 80039b2:	1cc4      	adds	r4, r0, #3
 80039b4:	f024 0403 	bic.w	r4, r4, #3
 80039b8:	42a0      	cmp	r0, r4
 80039ba:	d0e3      	beq.n	8003984 <_malloc_r+0x64>
 80039bc:	1a21      	subs	r1, r4, r0
 80039be:	4630      	mov	r0, r6
 80039c0:	f000 f808 	bl	80039d4 <_sbrk_r>
 80039c4:	3001      	adds	r0, #1
 80039c6:	d1dd      	bne.n	8003984 <_malloc_r+0x64>
 80039c8:	e7cf      	b.n	800396a <_malloc_r+0x4a>
 80039ca:	bf00      	nop
 80039cc:	200002f8 	.word	0x200002f8
 80039d0:	200002fc 	.word	0x200002fc

080039d4 <_sbrk_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	4d06      	ldr	r5, [pc, #24]	; (80039f0 <_sbrk_r+0x1c>)
 80039d8:	2300      	movs	r3, #0
 80039da:	4604      	mov	r4, r0
 80039dc:	4608      	mov	r0, r1
 80039de:	602b      	str	r3, [r5, #0]
 80039e0:	f7fd fbfe 	bl	80011e0 <_sbrk>
 80039e4:	1c43      	adds	r3, r0, #1
 80039e6:	d102      	bne.n	80039ee <_sbrk_r+0x1a>
 80039e8:	682b      	ldr	r3, [r5, #0]
 80039ea:	b103      	cbz	r3, 80039ee <_sbrk_r+0x1a>
 80039ec:	6023      	str	r3, [r4, #0]
 80039ee:	bd38      	pop	{r3, r4, r5, pc}
 80039f0:	20000408 	.word	0x20000408

080039f4 <__malloc_lock>:
 80039f4:	4801      	ldr	r0, [pc, #4]	; (80039fc <__malloc_lock+0x8>)
 80039f6:	f000 b809 	b.w	8003a0c <__retarget_lock_acquire_recursive>
 80039fa:	bf00      	nop
 80039fc:	20000410 	.word	0x20000410

08003a00 <__malloc_unlock>:
 8003a00:	4801      	ldr	r0, [pc, #4]	; (8003a08 <__malloc_unlock+0x8>)
 8003a02:	f000 b804 	b.w	8003a0e <__retarget_lock_release_recursive>
 8003a06:	bf00      	nop
 8003a08:	20000410 	.word	0x20000410

08003a0c <__retarget_lock_acquire_recursive>:
 8003a0c:	4770      	bx	lr

08003a0e <__retarget_lock_release_recursive>:
 8003a0e:	4770      	bx	lr

08003a10 <_init>:
 8003a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a12:	bf00      	nop
 8003a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a16:	bc08      	pop	{r3}
 8003a18:	469e      	mov	lr, r3
 8003a1a:	4770      	bx	lr

08003a1c <_fini>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	bf00      	nop
 8003a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a22:	bc08      	pop	{r3}
 8003a24:	469e      	mov	lr, r3
 8003a26:	4770      	bx	lr
